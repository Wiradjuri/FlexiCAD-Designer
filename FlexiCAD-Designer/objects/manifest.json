{
  "version": 1,
  "generated_at": "2025-09-26T22:25:19.710Z",
  "count": 19,
  "templates": [
    {
      "id": "arduino-case",
      "name": "arduino-case",
      "description": "Board protection case",
      "category": "electronics",
      "tags": [
        "arduino",
        "case",
        "protection",
        "electronics",
        "microcontroller"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Arduino Case\r\n\r\nA board-specific protection case for Arduino microcontrollers.\r\n\r\n**Parametric features:**\r\n\r\n- Support for Uno, Nano, and Mega boards\r\n- Adjustable case height\r\n- Optional screen cutout window\r\n- Optional fan mounting hole\r\n- Automatic port clearance\r\n\r\n**Usage:**\r\n\r\n1. Set board_type to match your Arduino model\r\n2. Adjust case height for your components\r\n3. Enable optional features as needed\r\n4. Print opening-up, test board fit before final assembly",
      "template": "// ============================================================================\r\n// Arduino Protection Case\r\n// Purpose: Board-specific snug case with optional screen cutout and fan mount.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nboard_type = \"Uno\";       // Board type: \"Uno\", \"Nano\", or \"Mega\"\r\ncase_height = 20;         // case height (mm)\r\nwall_thickness = 2;       // wall thickness (mm)\r\nport_clearance = 2;       // extra space around board (mm)\r\ninclude_screen_cutout = false; // add screen window on top\r\ninclude_fan_mount = false;     // add fan mounting hole on top\r\nclearance = 0.35;         // fit tolerance\r\n\r\n/* ------------------------- Board Dimensions (Built-in) ------------------------ */\r\n// Arduino Uno dimensions\r\nboard_length = board_type == \"Uno\" ? 68.6 : \r\n               board_type == \"Nano\" ? 45.0 : \r\n               board_type == \"Mega\" ? 101.5 : 68.6;\r\n               \r\nboard_width = board_type == \"Uno\" ? 53.4 : \r\n              board_type == \"Nano\" ? 18.0 : \r\n              board_type == \"Mega\" ? 53.3 : 53.4;\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(board_length > 0 && board_width > 0, \"Board dims > 0\");\r\nassert(case_height >= 12, \"Case height should be ≥ 12mm\");\r\nassert(wall_thickness >= 1.6, \"Wall thickness ≥ 1.6mm recommended\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_length = board_length + 2*port_clearance;\r\ninner_width  = board_width  + 2*port_clearance;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule arduino_case() {\r\n  difference() {\r\n    // Outer shell\r\n    cube([inner_length + 2*wall_thickness, inner_width + 2*wall_thickness, case_height], center=false);\r\n\r\n    // Hollow\r\n    translate([wall_thickness, wall_thickness, wall_thickness])\r\n      cube([inner_length, inner_width, case_height - wall_thickness], center=false);\r\n\r\n    // Simple side port cutout (USB side)\r\n    translate([0, (inner_width/2) + wall_thickness, case_height/2])\r\n      rotate([90,0,0])\r\n      cube([12 + clearance, 6 + clearance, wall_thickness + 1], center=true);\r\n\r\n    // Screen window (top)\r\n    if (include_screen_cutout) {\r\n      translate([ (inner_length/2) + wall_thickness, (inner_width/2) + wall_thickness, case_height + 0.5 ])\r\n        rotate([90,0,0])\r\n        cylinder(d=18 + clearance, h=wall_thickness + 1, $fn=64);\r\n    }\r\n\r\n    // Fan mount (top)\r\n    if (include_fan_mount) {\r\n      translate([ (inner_length/2) + wall_thickness, (inner_width/2) + wall_thickness, case_height + 0.5 ])\r\n        rotate([90,0,0])\r\n        cylinder(d=30 + clearance, h=wall_thickness + 1, $fn=96);\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\narduino_case();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Bottom down on build plate (opening facing up)\r\n// Supports: None needed\r\n// Layer height: 0.2mm for good detail\r\n// Infill: 20% for protection strength\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit board, may need light filing of port opening",
      "files": {
        "metadata": "objects/arduino-case/metadata.json",
        "readme": "objects/arduino-case/README.md",
        "template": "objects/arduino-case/template.scad"
      }
    },
    {
      "id": "car-fascia",
      "name": "car-fascia",
      "description": "Panel with AC vents and controls",
      "category": "automotive",
      "tags": [
        "automotive",
        "dashboard",
        "panel",
        "buttons",
        "vent"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Car Dashboard Fascia Panel\r\n\r\nA parametric dashboard panel with round AC vent and customizable button holes.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable panel dimensions (width, height, depth)\r\n- Configurable vent diameter\r\n- Variable number and size of button holes\r\n- Automatic spacing and positioning\r\n\r\n**Usage:**\r\n\r\n1. Edit the USER PARAMETERS section to match your dashboard requirements\r\n2. Test fit with cardboard using the projection() line\r\n3. Print face-down for best surface finish\r\n4. Light sanding may be needed for button holes",
      "template": "// ============================================================================\r\n// Car Dashboard Fascia Panel\r\n// Purpose: Parametric fascia with round vent and N button cutouts (strict, no defaults).\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\npanel_width = 200;        // overall width (mm)\r\npanel_height = 100;       // overall height (mm)\r\npanel_thickness = 15;     // panel depth (mm)\r\nvent_count = 3;           // number of AC vents\r\nvent_diameter = 30;       // AC vent diameter (mm)\r\nbutton_count = 3;         // number of button holes\r\nbutton_diameter = 12;     // button hole diameter (mm)\r\n\r\ncorner_radius = 3;        // small fixed fillet for safety\r\nbutton_row_y = panel_height * 0.35; // fraction down from top\r\nvent_center_y = panel_height * 0.70; // vent position from bottom\r\nclearance = 0.35;         // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(panel_width  > 0, \"panel_width must be > 0\");\r\nassert(panel_height > 0, \"panel_height must be > 0\");\r\nassert(panel_thickness >= 2, \"panel_thickness should be ≥ 2mm\");\r\nassert(button_count >= 1, \"At least one button\");\r\nassert(vent_count >= 2, \"At least 2 vents\");\r\nassert(vent_diameter > 0 && button_diameter > 0, \"diameters must be > 0\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nbutton_pitch = button_diameter * 1.8; // spacing guideline\r\nbuttons_total_span = (button_count - 1) * button_pitch;\r\nbuttons_start_x = (panel_width - buttons_total_span) / 2;\r\n\r\nvent_pitch = vent_diameter * 1.5; // spacing between vents\r\nvents_total_span = (vent_count - 1) * vent_pitch;\r\nvents_start_x = (panel_width - vents_total_span) / 2;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule rounded_panel(w, h, t, r) {\r\n  minkowski() {\r\n    cube([w - 2*r, h - 2*r, t], center=false);\r\n    cylinder(r=r, h=0.01, $fn=64);\r\n  }\r\n}\r\n\r\nmodule car_fascia_panel() {\r\n  difference() {\r\n    // Base panel\r\n    rounded_panel(panel_width, panel_height, panel_thickness, corner_radius);\r\n\r\n    // Row of vents (3 vents centered horizontally)\r\n    for (i = [0:vent_count-1]) {\r\n      translate([vents_start_x + i * vent_pitch, vent_center_y, -0.5])\r\n        cylinder(d=vent_diameter + clearance, h=panel_thickness + 1, $fn=96);\r\n    }\r\n\r\n    // Row of buttons\r\n    for (i = [0:button_count-1]) {\r\n      translate([buttons_start_x + i * button_pitch, button_row_y, -0.5])\r\n        cylinder(d=button_diameter + clearance, h=panel_thickness + 1, $fn=96);\r\n    }\r\n  }\r\n}\r\n\r\n// 1:1 paper test (toggle by removing leading //)\r\n// projection(cut=true) rounded_panel(panel_width, panel_height, 0.8, corner_radius);\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncar_fascia_panel();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Face down (buttons facing build plate)\r\n// Supports: None needed for this orientation\r\n// Layer height: 0.2-0.3mm recommended\r\n// Infill: 15-20% for strength\r\n// Print speed: Normal (50-60mm/s)\r\n// Post-processing: Light sanding of button holes for smooth fit",
      "files": {
        "metadata": "objects/car-fascia/metadata.json",
        "readme": "objects/car-fascia/README.md",
        "template": "objects/car-fascia/template.scad"
      }
    },
    {
      "id": "control-panel",
      "name": "control-panel",
      "description": "Button and dial interface",
      "category": "electronics",
      "tags": [
        "control",
        "panel",
        "interface",
        "buttons",
        "dials"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Control Panel\r\n\r\nA multi-purpose interface panel with buttons and dials.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable panel dimensions\r\n- Variable number of buttons and dials\r\n- Customizable button/dial diameters\r\n- Automatic layout and spacing\r\n\r\n**Usage:**\r\n\r\n1. Plan your control layout and count components\r\n2. Measure button and dial diameters\r\n3. Set panel size for your application\r\n4. Print face-down for smooth control surfaces",
      "template": "// ============================================================================\r\n// Multi-Purpose Control Panel\r\n// Purpose: Flat panel with buttons & dials arrays.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\npanel_width = 150;        // panel width (mm)\r\npanel_height = 80;        // panel height (mm)\r\npanel_thickness = 5;      // panel thickness (mm)\r\nbutton_count = 4;         // number of buttons\r\nbutton_diameter = 12;     // button diameter (mm)\r\ndial_count = 2;           // number of dials\r\ndial_diameter = 20;       // dial diameter (mm)\r\ncorner_radius = 4;        // corner rounding\r\nclearance = 0.35;         // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(panel_width > 0 && panel_height > 0 && panel_thickness > 0, \"panel dims > 0\");\r\nassert(button_count >= 0 && dial_count >= 0, \"counts ≥ 0\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nbutton_pitch = (button_diameter > 0) ? button_diameter * 1.8 : 0;\r\ndial_pitch   = (dial_diameter > 0)   ? dial_diameter   * 2.0 : 0;\r\nbuttons_span = (button_count > 0) ? (button_count - 1) * button_pitch : 0;\r\ndials_span   = (dial_count   > 0) ? (dial_count   - 1) * dial_pitch   : 0;\r\nbuttons_y = panel_height * 0.35;\r\ndials_y   = panel_height * 0.70;\r\nbuttons_start_x = (panel_width - buttons_span) / 2;\r\ndials_start_x   = (panel_width - dials_span) / 2;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule rounded_panel(w, h, t, r) {\r\n  minkowski() {\r\n    cube([w - 2*r, h - 2*r, t], center=false);\r\n    cylinder(r=r, h=0.01, $fn=64);\r\n  }\r\n}\r\n\r\nmodule control_panel() {\r\n  difference() {\r\n    rounded_panel(panel_width, panel_height, panel_thickness, corner_radius);\r\n\r\n    // Buttons\r\n    if (button_count > 0 && button_diameter > 0) {\r\n      for (i = [0:button_count-1]) {\r\n        translate([buttons_start_x + i * button_pitch, buttons_y, -0.5])\r\n          cylinder(d=button_diameter + clearance, h=panel_thickness + 1, $fn=96);\r\n      }\r\n    }\r\n\r\n    // Dials\r\n    if (dial_count > 0 && dial_diameter > 0) {\r\n      for (i = [0:dial_count-1]) {\r\n        translate([dials_start_x + i * dial_pitch, dials_y, -0.5])\r\n          cylinder(d=dial_diameter + clearance, h=panel_thickness + 1, $fn=96);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncontrol_panel();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Face down on build plate (holes facing up)\r\n// Supports: None needed\r\n// Layer height: 0.2mm for smooth holes\r\n// Infill: 20-25% for control interface strength\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit controls, light drilling if needed for smooth operation",
      "files": {
        "metadata": "objects/control-panel/metadata.json",
        "readme": "objects/control-panel/README.md",
        "template": "objects/control-panel/template.scad"
      }
    },
    {
      "id": "cup-holder",
      "name": "cup-holder",
      "description": "Adjustable car cup holder with spring-loaded grips for multiple cup sizes",
      "category": "automotive",
      "tags": [
        "automotive",
        "cup holder",
        "car",
        "adjustable",
        "spring",
        "universal",
        "insert"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Cup Holder Insert\r\n\r\nA parametric vehicle cup holder insert with customizable dimensions.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable outer diameter to fit your cup holder\r\n- Variable depth and height\r\n- Configurable wall thickness\r\n- Solid base with hollow interior\r\n\r\n**Usage:**\r\n\r\n1. Measure your existing cup holder diameter\r\n2. Edit parameters for your cup size\r\n3. Print upright (base on build plate)\r\n4. Test fit in vehicle before final use",
      "template": "// ============================================================================\r\n// Universal Car Cup Holder Insert \r\n// Purpose: Adjustable insert with spring-loaded grips and multiple cup sizes\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\ncup_diameter_min = 65;    // minimum cup diameter to hold (mm)\r\ncup_diameter_max = 85;    // maximum cup diameter to hold (mm)\r\ninsert_height = 80;       // total height of insert (mm)\r\ngrip_count = 4;           // number of spring grips (3-6)\r\ngrip_thickness = 3;       // thickness of grip arms (mm)\r\nbase_diameter = 90;       // outer diameter of base (fits car holder)\r\nbase_height = 15;         // height of base section (mm)\r\nspring_flex = 8;          // how much grips can flex inward (mm)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(cup_diameter_min > 0 && cup_diameter_max > cup_diameter_min, \"Cup diameters invalid\");\r\nassert(grip_count >= 3 && grip_count <= 8, \"Grip count should be 3-8\");\r\nassert(insert_height > base_height, \"Insert height must be > base height\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nwall_thickness = 2.5;\r\ngrip_start_diameter = cup_diameter_max + 2*spring_flex;\r\ngrip_end_diameter = cup_diameter_min;\r\ngrip_angle = 360 / grip_count;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\n\r\nmodule base_section() {\r\n    // Stable base that fits in car cup holder\r\n    difference() {\r\n        cylinder(d=base_diameter, h=base_height, $fn=64);\r\n        \r\n        // Weight reduction holes\r\n        for(i = [0:5]) {\r\n            rotate([0, 0, i * 60])\r\n                translate([base_diameter/3, 0, -1])\r\n                    cylinder(d=8, h=base_height + 2, $fn=16);\r\n        }\r\n    }\r\n    \r\n    // Center spigot for cup centering\r\n    translate([0, 0, base_height])\r\n        cylinder(d=20, h=5, $fn=32);\r\n}\r\n\r\nmodule flexible_grip(angle) {\r\n    rotate([0, 0, angle]) {\r\n        // Grip arm with taper\r\n        hull() {\r\n            translate([grip_end_diameter/2, 0, base_height])\r\n                cylinder(d=grip_thickness, h=insert_height - base_height - 10, $fn=8);\r\n            translate([grip_start_diameter/2, 0, base_height])\r\n                cylinder(d=grip_thickness + 1, h=5, $fn=8);\r\n        }\r\n        \r\n        // Grip tip with rubber contact area\r\n        translate([grip_end_diameter/2, 0, insert_height - 15])\r\n            sphere(d=grip_thickness + 2, $fn=16);\r\n    }\r\n}\r\n\r\nmodule cup_stabilizer_rings() {\r\n    // Multiple diameter rings for different cup sizes\r\n    for(i = [0:2]) {\r\n        ring_diameter = cup_diameter_min + (i * 8);\r\n        ring_height = base_height + 20 + (i * 15);\r\n        \r\n        difference() {\r\n            translate([0, 0, ring_height])\r\n                cylinder(d=ring_diameter + 4, h=2, $fn=32);\r\n            translate([0, 0, ring_height - 1])\r\n                cylinder(d=ring_diameter, h=4, $fn=32);\r\n        }\r\n    }\r\n}\r\n\r\nmodule complete_cup_holder() {\r\n    // Main base\r\n    base_section();\r\n    \r\n    // Spring grips\r\n    for(i = [0:grip_count-1]) {\r\n        flexible_grip(i * grip_angle);\r\n    }\r\n    \r\n    // Support rings for stability\r\n    cup_stabilizer_rings();\r\n    \r\n    // Connecting structure\r\n    for(i = [0:grip_count-1]) {\r\n        rotate([0, 0, i * grip_angle]) {\r\n            hull() {\r\n                translate([15, 0, base_height])\r\n                    cylinder(d=2, h=5, $fn=8);\r\n                translate([grip_start_diameter/2 - 5, 0, base_height])\r\n                    cylinder(d=2, h=5, $fn=8);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncomplete_cup_holder();\r\n\r\n/* ============================== PRINT SETTINGS ============================== */\r\n// Print orientation: Base down (as oriented)\r\n// Supports: None needed - designed for support-free printing\r\n// Layer height: 0.15-0.2mm for grip flexibility\r\n// Infill: 15-20% for flexibility in grips\r\n// Print speed: 40mm/s for grip details\r\n// Material: PETG or PLA+ recommended for flexibility",
      "files": {
        "metadata": "objects/cup-holder/metadata.json",
        "readme": "objects/cup-holder/README.md",
        "template": "objects/cup-holder/template.scad"
      }
    },
    {
      "id": "dice-tower",
      "name": "dice-tower",
      "description": "Gaming randomizer",
      "category": "gaming",
      "tags": [
        "gaming",
        "dice",
        "tower",
        "tabletop",
        "randomizer"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Dice Tower\r\n\r\nA tabletop randomizer with multiple ramps and collection tray.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable tower height and base width\r\n- Variable number of levels\r\n- Configurable ramp angle\r\n- Optional dice collection tray\r\n\r\n**Usage:**\r\n\r\n1. Set tower size for your gaming table\r\n2. Adjust ramp angle for good dice tumbling\r\n3. Include tray for convenient dice collection\r\n4. Print with supports for ramp overhangs, test dice flow",
      "template": "// ============================================================================\r\n// Tabletop Dice Tower\r\n// Purpose: Multi-ramp randomizer with optional tray.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\ntower_height = 120;       // tower height (mm)\r\nbase_width = 80;          // base width (mm)\r\nramp_angle = 30;          // ramp angle (degrees)\r\nlevels = 4;               // number of levels\r\nwall_thickness = 2;       // wall thickness (mm)\r\ninclude_tray = true;      // include dice collection tray\r\nclearance = 0.3;          // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(tower_height > 0 && base_width > 0, \"tower/base > 0\");\r\nassert(levels >= 2, \"At least two levels\");\r\nassert(ramp_angle >= 10 && ramp_angle <= 70, \"ramp angle reasonable\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_width = base_width - 2*wall_thickness;\r\nlevel_step = tower_height / levels;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule dice_tower() {\r\n  // Tower shell\r\n  difference() {\r\n    cube([base_width, base_width, tower_height], center=false);\r\n    if (wall_thickness > 0) {\r\n      translate([wall_thickness, wall_thickness, wall_thickness])\r\n        cube([inner_width, inner_width, tower_height - wall_thickness], center=false);\r\n    }\r\n  }\r\n\r\n  // Ramps (simple planes)\r\n  for (i = [0:levels-1]) {\r\n    z = (i+0.5) * level_step;\r\n    translate([wall_thickness + 2, wall_thickness + 2, z])\r\n      rotate([ramp_angle, 0, (i%2==0) ? 0 : 180])\r\n      cube([inner_width - 4, 2, inner_width - 4], center=false);\r\n  }\r\n\r\n  // Output tray\r\n  if (include_tray) {\r\n    translate([0, base_width + 2, 0])\r\n      difference() {\r\n        cube([base_width, base_width * 0.6, 22], center=false);\r\n        translate([wall_thickness, wall_thickness, 2])\r\n          cube([base_width - 2*wall_thickness, base_width * 0.6 - 2*wall_thickness, 18], center=false);\r\n      }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ndice_tower();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Base down on build plate\r\n// Supports: Yes, needed for ramp overhangs\r\n// Layer height: 0.2mm for good detail\r\n// Infill: 20-25% for gaming durability\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Remove supports carefully, test dice flow through tower",
      "files": {
        "metadata": "objects/dice-tower/metadata.json",
        "readme": "objects/dice-tower/README.md",
        "template": "objects/dice-tower/template.scad"
      }
    },
    {
      "id": "drone-frame",
      "name": "drone-frame",
      "description": "Professional quadcopter frame with customizable motor mounts",
      "category": "Aerospace",
      "tags": [
        "drone",
        "quadcopter",
        "frame",
        "motor-mount",
        "aerospace",
        "professional"
      ],
      "difficulty": "Advanced",
      "estimated_time": "30-60 minutes",
      "readme": "# Parametric Drone Frame\r\n\r\n## Overview\r\nProfessional-grade quadcopter frame designed for custom drone builds. Features parametric motor spacing, integrated electronics bay, and optimized weight distribution.\r\n\r\n## Key Features\r\n\r\n**Structural Design:**\r\n- Customizable motor arm spacing (200-600mm)\r\n- Reinforced center plate with electronics bay\r\n- Integrated landing gear with shock absorption\r\n- Weight-optimized hole patterns\r\n\r\n**Electronics Integration:**\r\n- Standard flight controller mounting (30.5mm spacing)\r\n- Wire management channels in arms\r\n- LED strip integration channels\r\n- Battery compartment with secure mounting\r\n\r\n**Advanced Options:**\r\n- Optional camera gimbal mount\r\n- Adjustable arm angles and thickness\r\n- Motor mount compatibility for various sizes\r\n- Modular landing gear system\r\n\r\n## Customization Parameters\r\n\r\n| Parameter | Default | Range | Description |\r\n|-----------|---------|--------|-------------|\r\n| Frame Width | 450mm | 200-600mm | Motor-to-motor distance |\r\n| Arm Thickness | 5mm | 3-10mm | Structural arm thickness |\r\n| Motor Mount | 28mm | 20-35mm | Motor mounting diameter |\r\n| Battery Bay | 120x35mm | Custom | Battery compartment size |\r\n\r\n## Materials & Printing\r\n\r\n**Recommended Materials:**\r\n- **PETG**: Best overall choice for strength and flexibility\r\n- **Carbon Fiber PLA**: Maximum strength, reduced weight\r\n- **ABS**: Alternative option, requires heated bed\r\n\r\n**Print Settings:**\r\n- Layer Height: 0.2mm\r\n- Infill: 30-40% (gyroid recommended)\r\n- Perimeters: 4-5 walls\r\n- Speed: 40mm/s for quality\r\n\r\n## Assembly Guide\r\n\r\n1. **Motor Installation**: Mount motors with provided hole patterns\r\n2. **Electronics Bay**: Install flight controller using standard spacing\r\n3. **Wire Management**: Route ESC wires through arm channels\r\n4. **Battery Mount**: Secure with velcro or zip ties\r\n5. **Camera Mount**: Attach gimbal if option selected\r\n6. **Final Check**: Balance and calibrate before flight\r\n\r\n## Applications\r\n\r\n- **Racing Drones**: High-speed competition frames\r\n- **Photography**: Stable platform for camera work\r\n- **Research**: Custom payload integration\r\n- **Education**: Learning platform for drone mechanics\r\n\r\n## Safety Notes\r\n\r\n⚠️ **Important**: Always follow local regulations for drone operation\r\n⚠️ **Testing**: Thoroughly test all connections before flight\r\n⚠️ **Balance**: Ensure proper weight distribution and balance",
      "template": "/*\r\n * ================================================================\r\n * PARAMETRIC DRONE FRAME GENERATOR\r\n * Professional quadcopter frame with customizable motor mounts\r\n * ================================================================\r\n * \r\n * Author: FlexiCAD Designer\r\n * Category: Aerospace/Drones\r\n * Complexity: Advanced\r\n * Print Time: 3-5 hours\r\n * Material: PETG, Carbon Fiber PLA, or ABS\r\n * \r\n * Description:\r\n * Custom drone frame with parametric motor spacing, arm thickness,\r\n * camera mount, and battery compartment. Optimized for strength\r\n * and minimal weight.\r\n */\r\n\r\n/* ----------------------------- USER PARAMETERS ----------------------------- */\r\n\r\n// Frame Dimensions\r\nframe_width = 450;          // Distance between front and rear motors (mm)\r\nframe_length = 450;         // Distance between left and right motors (mm)\r\ncenter_plate_size = 80;     // Size of central mounting plate (mm)\r\ncenter_plate_thickness = 3; // Thickness of center plate (mm)\r\n\r\n// Arm Configuration  \r\narm_width = 20;             // Width of motor arms (mm)\r\narm_thickness = 5;          // Thickness of motor arms (mm)\r\narm_angle = 45;             // Angle of arms from center (degrees)\r\n\r\n// Motor Mount\r\nmotor_mount_diameter = 28;  // Diameter of motor mount (mm)\r\nmotor_hole_spacing = 19;    // Distance between motor screw holes (mm)\r\nmotor_screw_diameter = 3;   // Diameter of motor mounting screws (mm)\r\n\r\n// Electronics Bay\r\nbattery_bay_length = 120;   // Length of battery compartment (mm)\r\nbattery_bay_width = 35;     // Width of battery compartment (mm)\r\nelectronics_mount_holes = true; // Include mounting holes for flight controller\r\n\r\n// Landing Gear\r\ninclude_landing_gear = true; // Add landing gear legs\r\nlanding_gear_height = 30;   // Height of landing legs (mm)\r\n\r\n// Advanced Features\r\ncamera_mount = true;        // Include front camera mount\r\nled_strip_channels = true;  // Include channels for LED strips\r\nwire_management = true;     // Include wire management clips\r\n\r\n/* ----------------------------- ASSERTIONS ----------------------------- */\r\n\r\nassert(frame_width >= 200, \"Frame width must be at least 200mm for stability\");\r\nassert(frame_length >= 200, \"Frame length must be at least 200mm for stability\");\r\nassert(arm_thickness >= 3, \"Arm thickness must be at least 3mm for strength\");\r\nassert(motor_mount_diameter >= 20, \"Motor mount diameter must be at least 20mm\");\r\n\r\n/* ----------------------------- MAIN GEOMETRY ----------------------------- */\r\n\r\nmodule drone_frame() {\r\n    difference() {\r\n        union() {\r\n            // Center plate\r\n            center_plate();\r\n            \r\n            // Motor arms\r\n            for (i = [0, 1, 2, 3]) {\r\n                rotate([0, 0, i * 90 + arm_angle]) {\r\n                    translate([0, 0, center_plate_thickness/2])\r\n                        motor_arm();\r\n                }\r\n            }\r\n            \r\n            // Landing gear\r\n            if (include_landing_gear) {\r\n                for (i = [0, 1, 2, 3]) {\r\n                    rotate([0, 0, i * 90 + arm_angle]) {\r\n                        translate([frame_width/2 - 10, 0, 0])\r\n                            landing_leg();\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Camera mount\r\n            if (camera_mount) {\r\n                translate([frame_length/2 - 15, 0, center_plate_thickness])\r\n                    camera_gimbal_mount();\r\n            }\r\n        }\r\n        \r\n        // Battery bay cutout\r\n        translate([0, 0, -1])\r\n            battery_compartment();\r\n        \r\n        // Electronics mounting holes\r\n        if (electronics_mount_holes) {\r\n            electronics_holes();\r\n        }\r\n        \r\n        // Weight reduction holes\r\n        weight_reduction_pattern();\r\n    }\r\n    \r\n    // Wire management clips\r\n    if (wire_management) {\r\n        for (i = [0, 1, 2, 3]) {\r\n            rotate([0, 0, i * 90]) {\r\n                translate([15, 0, center_plate_thickness])\r\n                    wire_clip();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule center_plate() {\r\n    hull() {\r\n        for (i = [0, 1, 2, 3]) {\r\n            rotate([0, 0, i * 90 + arm_angle]) {\r\n                translate([center_plate_size/3, 0, 0])\r\n                    cylinder(d=center_plate_size/2, h=center_plate_thickness);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule motor_arm() {\r\n    arm_length = sqrt(pow(frame_width/2, 2) + pow(frame_length/2, 2)) - center_plate_size/3;\r\n    \r\n    difference() {\r\n        // Main arm structure\r\n        hull() {\r\n            cylinder(d=arm_width, h=arm_thickness);\r\n            translate([arm_length, 0, 0])\r\n                cylinder(d=motor_mount_diameter + 6, h=arm_thickness);\r\n        }\r\n        \r\n        // Motor mount holes\r\n        translate([arm_length, 0, -1]) {\r\n            cylinder(d=motor_mount_diameter, h=arm_thickness + 2);\r\n            \r\n            // Motor screw holes\r\n            for (angle = [0, 90, 180, 270]) {\r\n                rotate([0, 0, angle])\r\n                    translate([motor_hole_spacing/2, 0, 0])\r\n                        cylinder(d=motor_screw_diameter, h=arm_thickness + 2);\r\n            }\r\n        }\r\n        \r\n        // LED strip channel\r\n        if (led_strip_channels) {\r\n            translate([5, 0, arm_thickness - 1])\r\n                cube([arm_length - 10, 8, 2], center=true);\r\n        }\r\n    }\r\n}\r\n\r\nmodule battery_compartment() {\r\n    translate([0, 0, 0])\r\n        cube([battery_bay_length, battery_bay_width, center_plate_thickness + 2], center=true);\r\n}\r\n\r\nmodule electronics_holes() {\r\n    hole_spacing = 30.5; // Standard flight controller mounting\r\n    for (x = [-hole_spacing/2, hole_spacing/2]) {\r\n        for (y = [-hole_spacing/2, hole_spacing/2]) {\r\n            translate([x, y, -1])\r\n                cylinder(d=3, h=center_plate_thickness + 2);\r\n        }\r\n    }\r\n}\r\n\r\nmodule weight_reduction_pattern() {\r\n    for (i = [0, 1, 2, 3]) {\r\n        rotate([0, 0, i * 90 + 22.5]) {\r\n            for (r = [20:10:center_plate_size/2-10]) {\r\n                translate([r, 0, -1])\r\n                    cylinder(d=6, h=center_plate_thickness + 2);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule landing_leg() {\r\n    translate([0, 0, -landing_gear_height]) {\r\n        difference() {\r\n            cylinder(d=8, h=landing_gear_height + center_plate_thickness);\r\n            translate([0, 0, -1])\r\n                cylinder(d=4, h=landing_gear_height + center_plate_thickness + 2);\r\n        }\r\n        \r\n        // Foot pad\r\n        translate([0, 0, 0])\r\n            cylinder(d=20, h=3);\r\n    }\r\n}\r\n\r\nmodule camera_gimbal_mount() {\r\n    difference() {\r\n        cube([30, 25, 15], center=true);\r\n        translate([0, 0, 2])\r\n            cube([25, 20, 12], center=true);\r\n        \r\n        // Gimbal mounting holes\r\n        for (x = [-10, 10]) {\r\n            translate([x, 0, -5])\r\n                cylinder(d=3, h=15);\r\n        }\r\n    }\r\n}\r\n\r\nmodule wire_clip() {\r\n    difference() {\r\n        cube([8, 6, 4], center=true);\r\n        translate([0, 0, 1])\r\n            cube([6, 3, 4], center=true);\r\n    }\r\n}\r\n\r\n/* ----------------------------- ASSEMBLY ----------------------------- */\r\n\r\ndrone_frame();\r\n\r\n/* ----------------------------- PRINTING GUIDANCE ----------------------------- */\r\n\r\n/*\r\nPRINTING RECOMMENDATIONS:\r\n\r\nMaterial: PETG or Carbon Fiber PLA recommended\r\n- PETG: Best balance of strength and flexibility\r\n- Carbon Fiber PLA: Maximum strength, lighter weight\r\n- ABS: Good alternative, requires heated bed\r\n\r\nSettings:\r\n- Layer Height: 0.2mm\r\n- Infill: 30-40% (gyroid pattern recommended)\r\n- Perimeters: 4-5 for maximum strength\r\n- Print Speed: 40mm/s for quality\r\n- Support: None needed with proper orientation\r\n\r\nOrientation:\r\n- Print with center plate flat on bed\r\n- Arms will angle upward naturally\r\n- No supports required\r\n\r\nPost-Processing:\r\n1. Remove any stringing between arms\r\n2. Test fit motors before final assembly\r\n3. Use threadlocker on motor screws\r\n4. Balance propellers before first flight\r\n\r\nAssembly Notes:\r\n- Install flight controller in center bay\r\n- Route ESC wires through arm channels\r\n- Secure battery with velcro straps\r\n- Calibrate motor directions and ESC settings\r\n\r\nESTIMATED PRINT TIME: 3-5 hours\r\nMATERIAL USAGE: ~80-120g depending on infill\r\n*/",
      "files": {
        "metadata": "objects/drone-frame/metadata.json",
        "readme": "objects/drone-frame/README.md",
        "template": "objects/drone-frame/template.scad"
      }
    },
    {
      "id": "electronic-enclosure",
      "name": "electronic-enclosure",
      "description": "Project box with ventilation",
      "category": "electronics",
      "tags": [
        "electronics",
        "enclosure",
        "box",
        "ventilation",
        "projects"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Electronic Enclosure\r\n\r\nA parametric project box with ventilation and cable entry.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable box dimensions (length, width, height)\r\n- Configurable wall thickness\r\n- Variable number of ventilation holes\r\n- Customizable cable entry diameter\r\n\r\n**Usage:**\r\n\r\n1. Measure your electronic components to determine box size\r\n2. Set wall thickness based on required strength\r\n3. Adjust vent count for thermal requirements\r\n4. Print bottom-down, no supports needed",
      "template": "// ============================================================================\r\n// Electronic Project Enclosure\r\n// Purpose: Hollow box w/ vents and cable entry.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nbox_length = 100;         // enclosure length (mm)\r\nbox_width = 60;           // enclosure width (mm)\r\nbox_height = 30;          // enclosure height (mm)\r\nwall_thickness = 2;       // wall thickness (mm)\r\nvent_count = 6;           // number of ventilation holes\r\ncable_diameter = 8;       // cable entry diameter (mm)\r\nclearance = 0.3;          // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(box_length > 0 && box_width > 0 && box_height > 0, \"box dims > 0\");\r\nassert(wall_thickness >= 0, \"wall_thickness ≥ 0\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_length = box_length - 2*wall_thickness;\r\ninner_width  = box_width  - 2*wall_thickness;\r\ninner_height = box_height - wall_thickness;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule enclosure_box() {\r\n  difference() {\r\n    // Outer shell\r\n    cube([box_length, box_width, box_height], center=false);\r\n\r\n    // Hollow\r\n    if (wall_thickness > 0) {\r\n      translate([wall_thickness, wall_thickness, wall_thickness])\r\n        cube([inner_length, inner_width, inner_height], center=false);\r\n    }\r\n\r\n    // Cable entry on one side\r\n    if (cable_diameter > 0) {\r\n      translate([box_length/2, -0.5, box_height/2])\r\n        rotate([90,0,0])\r\n        cylinder(d=cable_diameter + clearance, h=wall_thickness + 1, $fn=64);\r\n    }\r\n\r\n    // Top vents array\r\n    if (vent_count > 0) {\r\n      for (i = [0:vent_count-1]) {\r\n        translate([ (i+0.5)*(box_length/vent_count), box_width/2, box_height + 0.5 ])\r\n          rotate([90,0,0])\r\n          cylinder(d=4 + clearance, h=wall_thickness + 1, $fn=48);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nenclosure_box();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Bottom face down on build plate\r\n// Supports: None needed\r\n// Layer height: 0.2-0.3mm\r\n// Infill: 15-20% sufficient for electronics housing\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit cables through entry hole, drill if needed",
      "files": {
        "metadata": "objects/electronic-enclosure/metadata.json",
        "readme": "objects/electronic-enclosure/README.md",
        "template": "objects/electronic-enclosure/template.scad"
      }
    },
    {
      "id": "headphone-stand",
      "name": "headphone-stand",
      "description": "Premium headphone display with RGB LED channel, USB hub, cable management, and weighted base",
      "category": "office",
      "tags": [
        "headphone",
        "stand",
        "gaming",
        "rgb",
        "usb",
        "cable management",
        "professional",
        "weighted"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Headphone Stand\r\n\r\nA desktop stand with vertical post and horizontal hook.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable stand height and base diameter\r\n- Configurable post diameter\r\n- Optional cable management notch\r\n- Optional weighted base for stability\r\n\r\n**Usage:**\r\n\r\n1. Measure your headphone width\r\n2. Set stand height for comfortable access\r\n3. Enable cable management for tidy desk\r\n4. Print with supports for hook overhang",
      "template": "// ============================================================================\r\n// Professional Gaming Headphone Stand with RGB\r\n// Purpose: Premium headphone display with cable management and customization\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nheadphone_width = 180;    // headphone width (mm)\r\nstand_height = 280;       // stand height (mm)\r\nbase_diameter = 140;      // base diameter for stability (mm)\r\npost_diameter = 20;       // post diameter (mm)\r\nrgb_enabled = true;       // include RGB LED channel\r\ncable_management = true;  // include cable routing\r\nusb_hub = true;          // include USB hub cavity\r\nweight_cavity = true;     // hollow base for added weight\r\nhook_angle = 15;         // hook forward angle (degrees)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(stand_height >= 200 && stand_height <= 350, \"Stand height should be 200-350mm\");\r\nassert(headphone_width >= 120 && headphone_width <= 220, \"Headphone width should be 120-220mm\");\r\nassert(hook_angle >= 0 && hook_angle <= 30, \"Hook angle should be 0-30 degrees\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nhook_depth = (headphone_width / 2) + 20;\r\nbase_height = 15;\r\nhook_width = 80;\r\ncable_channel_width = 8;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\n\r\nmodule weighted_base() {\r\n    difference() {\r\n        // Main base with rounded edges\r\n        hull() {\r\n            cylinder(d=base_diameter, h=base_height, $fn=64);\r\n            translate([0, 0, base_height-2])\r\n                cylinder(d=base_diameter-10, h=2, $fn=64);\r\n        }\r\n        \r\n        // Weight cavity\r\n        if (weight_cavity) {\r\n            translate([0, 0, 3])\r\n                cylinder(d=base_diameter-20, h=base_height-5, $fn=64);\r\n        }\r\n        \r\n        // USB hub cavity\r\n        if (usb_hub) {\r\n            translate([base_diameter/2-15, -20, 2])\r\n                cube([25, 40, 8]);\r\n        }\r\n        \r\n        // Cable exit slots\r\n        if (cable_management) {\r\n            translate([base_diameter/2-2, -cable_channel_width/2, 0])\r\n                cube([8, cable_channel_width, base_height]);\r\n        }\r\n    }\r\n    \r\n    // Non-slip feet\r\n    for(i = [0:2]) {\r\n        rotate([0, 0, i * 120])\r\n            translate([base_diameter/2-8, 0, 0])\r\n                cylinder(d=12, h=2, $fn=16);\r\n    }\r\n}\r\n\r\nmodule support_post() {\r\n    difference() {\r\n        // Main post with slight taper\r\n        translate([0, 0, base_height])\r\n            cylinder(d1=post_diameter+2, d2=post_diameter, h=stand_height-base_height-30, $fn=32);\r\n        \r\n        // RGB LED channel\r\n        if (rgb_enabled) {\r\n            translate([0, 0, base_height+5])\r\n                cylinder(d=6, h=stand_height-base_height-40, $fn=16);\r\n        }\r\n        \r\n        // Cable routing channel\r\n        if (cable_management) {\r\n            translate([-cable_channel_width/2, post_diameter/2-2, base_height])\r\n                cube([cable_channel_width, 4, stand_height-base_height-30]);\r\n        }\r\n    }\r\n}\r\n\r\nmodule headphone_hook() {\r\n    translate([0, 0, stand_height-25]) {\r\n        // Main hook arm\r\n        rotate([hook_angle, 0, 0]) {\r\n            difference() {\r\n                // Hook shape\r\n                hull() {\r\n                    cylinder(d=post_diameter, h=10, $fn=32);\r\n                    translate([hook_depth, 0, 0])\r\n                        cylinder(d=15, h=10, $fn=32);\r\n                }\r\n                \r\n                // Headphone rest groove\r\n                translate([10, 0, 5])\r\n                    rotate([0, 90, 0])\r\n                        cylinder(d=8, h=hook_depth-5, $fn=16);\r\n            }\r\n            \r\n            // Hook end with padding area\r\n            translate([hook_depth, 0, 0]) {\r\n                difference() {\r\n                    cylinder(d=18, h=10, $fn=32);\r\n                    translate([0, 0, -1])\r\n                        cylinder(d=10, h=12, $fn=16);\r\n                }\r\n                // Soft padding ring area\r\n                translate([0, 0, 8])\r\n                    torus(12, 2);\r\n            }\r\n        }\r\n        \r\n        // Support strut\r\n        hull() {\r\n            cylinder(d=post_diameter/2, h=5, $fn=16);\r\n            rotate([hook_angle, 0, 0])\r\n                translate([hook_depth/2, 0, 0])\r\n                    cylinder(d=8, h=5, $fn=16);\r\n        }\r\n    }\r\n}\r\n\r\nmodule torus(major_r, minor_r) {\r\n    rotate_extrude($fn=32)\r\n        translate([major_r, 0, 0])\r\n            circle(r=minor_r, $fn=16);\r\n}\r\n\r\nmodule cable_organizer() {\r\n    if (cable_management) {\r\n        // Spiral cable guide on post\r\n        for(i = [0:10]) {\r\n            height = base_height + 20 + (i * 15);\r\n            rotate([0, 0, i * 36])\r\n                translate([post_diameter/2 + 2, 0, height])\r\n                    sphere(d=4, $fn=12);\r\n        }\r\n        \r\n        // Cable clips at base\r\n        for(i = [0:1]) {\r\n            rotate([0, 0, i * 180])\r\n                translate([base_diameter/2-8, 0, base_height])\r\n                    difference() {\r\n                        cylinder(d=8, h=6, $fn=16);\r\n                        translate([0, 0, 2])\r\n                            cylinder(d=5, h=5, $fn=16);\r\n                        translate([-2.5, -6, 2])\r\n                            cube([5, 12, 5]);\r\n                    }\r\n        }\r\n    }\r\n}\r\n\r\nmodule complete_headphone_stand() {\r\n    weighted_base();\r\n    support_post();\r\n    headphone_hook();\r\n    cable_organizer();\r\n    \r\n    // Brand/customization text area\r\n    translate([0, -base_diameter/2+5, 1])\r\n        linear_extrude(1)\r\n            text(\"FLEXICAD\", size=8, halign=\"center\", font=\"Arial:style=Bold\");\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncomplete_headphone_stand();\r\n\r\n/* ============================== PRINT SETTINGS ============================== */\r\n// Print orientation: Base down (as oriented)\r\n// Layer height: 0.2mm\r\n// Infill: 25% for base, 15% for post\r\n// Supports: None needed\r\n// Material: PETG or ABS for durability\r\n// Post-processing: Add felt padding to hook, optional RGB LED strip\r\n    difference() {\r\n      cylinder(d=post_diameter + 10, h=hook_depth, $fn=96);\r\n      translate([0,0,-0.5]) cylinder(d=post_diameter + 2, h=hook_depth + 1, $fn=96);\r\n    }\r\n\r\n  // Cable manager notch\r\n  if (cable_manager) {\r\n    translate([0, base_diameter/2 - 8, 6])\r\n      cube([14, 6, 6], center=true);\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nheadphone_stand();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Base down on build plate\r\n// Supports: Yes, needed for horizontal hook overhang\r\n// Layer height: 0.2mm for smooth finish\r\n// Infill: 25% for stability, 100% if weighted_base is false\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Remove supports carefully from hook area",
      "files": {
        "metadata": "objects/headphone-stand/metadata.json",
        "readme": "objects/headphone-stand/README.md",
        "template": "objects/headphone-stand/template.scad"
      }
    },
    {
      "id": "license-plate-frame",
      "name": "license-plate-frame",
      "description": "Custom mounting frame for license plates",
      "category": "automotive",
      "tags": [
        "automotive",
        "license",
        "plate",
        "frame",
        "mounting"
      ],
      "difficulty": "Easy",
      "estimated_time": "30-60 minutes",
      "readme": "# License Plate Frame\r\n\r\nA customizable mounting frame for license plates with adjustable dimensions and mounting options.\r\n\r\n## Features\r\n\r\n- **Standard Compatibility**: Default dimensions for standard license plates (372mm x 135mm)\r\n- **Adjustable Border**: Customizable frame border width\r\n- **Secure Mounting**: Four corner mounting holes with adjustable diameter\r\n- **Back Support**: Optional rear lip to hold plate securely\r\n- **Rounded Corners**: Aesthetic corner rounding for professional appearance\r\n\r\n## Usage\r\n\r\n1. Set your license plate dimensions (default is standard automotive size)\r\n2. Adjust frame border width for desired aesthetic\r\n3. Configure mounting hole diameter to match your screws\r\n4. Enable back support lip if needed for secure plate retention\r\n5. Customize corner radius for appearance\r\n\r\n## Printing Guide\r\n\r\n- **Orientation**: Print face-down on build plate\r\n- **Supports**: None required\r\n- **Layer Height**: 0.2-0.3mm for good surface finish\r\n- **Infill**: 20-25% for adequate strength\r\n- **Material**: PLA, PETG, or ABS (outdoor use requires UV-resistant material)\r\n\r\n## Customization\r\n\r\nModify the USER PARAMETERS section to:\r\n- Change plate dimensions for non-standard plates\r\n- Adjust frame width for different aesthetic preferences\r\n- Resize mounting holes for various screw sizes\r\n- Enable/disable back support based on mounting method",
      "template": "// ============================================================================\r\n// License Plate Frame\r\n// Purpose: Custom license plate mounting frame\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nplate_width = 372;          // license plate width (standard 372mm)\r\nplate_height = 135;         // license plate height (standard 135mm)\r\nframe_border = 15;          // frame border width (mm)\r\nframe_thickness = 3;        // frame thickness (mm)\r\nmounting_hole_diameter = 6;  // mounting hole diameter (mm)\r\ncorner_radius = 5;          // corner rounding (mm)\r\nback_support_height = 8;    // rear support lip height (mm)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(plate_width > 0 && plate_height > 0, \"Plate dimensions must be > 0\");\r\nassert(frame_border >= 5, \"Frame border should be ≥ 5mm\");\r\nassert(frame_thickness >= 2, \"Frame thickness should be ≥ 2mm\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ntotal_width = plate_width + 2*frame_border;\r\ntotal_height = plate_height + 2*frame_border;\r\ncutout_width = plate_width;\r\ncutout_height = plate_height;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule rounded_rect(w, h, r) {\r\n    if (r > 0) {\r\n        minkowski() {\r\n            square([w - 2*r, h - 2*r], center=true);\r\n            circle(r=r, $fn=32);\r\n        }\r\n    } else {\r\n        square([w, h], center=true);\r\n    }\r\n}\r\n\r\nmodule license_plate_frame() {\r\n    difference() {\r\n        // Main frame\r\n        linear_extrude(frame_thickness) {\r\n            rounded_rect(total_width, total_height, corner_radius);\r\n        }\r\n        \r\n        // License plate cutout\r\n        translate([0, 0, -0.5]) {\r\n            linear_extrude(frame_thickness + 1) {\r\n                rounded_rect(cutout_width, cutout_height, max(0, corner_radius - frame_border/2));\r\n            }\r\n        }\r\n        \r\n        // Mounting holes - top corners\r\n        translate([total_width/2 - frame_border/2, total_height/2 - frame_border/2, -0.5]) {\r\n            cylinder(d=mounting_hole_diameter, h=frame_thickness + 1, $fn=32);\r\n        }\r\n        translate([-total_width/2 + frame_border/2, total_height/2 - frame_border/2, -0.5]) {\r\n            cylinder(d=mounting_hole_diameter, h=frame_thickness + 1, $fn=32);\r\n        }\r\n        \r\n        // Mounting holes - bottom corners\r\n        translate([total_width/2 - frame_border/2, -total_height/2 + frame_border/2, -0.5]) {\r\n            cylinder(d=mounting_hole_diameter, h=frame_thickness + 1, $fn=32);\r\n        }\r\n        translate([-total_width/2 + frame_border/2, -total_height/2 + frame_border/2, -0.5]) {\r\n            cylinder(d=mounting_hole_diameter, h=frame_thickness + 1, $fn=32);\r\n        }\r\n    }\r\n    \r\n    // Back support lip\r\n    if (back_support_height > 0) {\r\n        translate([0, 0, frame_thickness]) {\r\n            difference() {\r\n                linear_extrude(back_support_height) {\r\n                    difference() {\r\n                        rounded_rect(cutout_width + 4, cutout_height + 4, corner_radius);\r\n                        rounded_rect(cutout_width, cutout_height, corner_radius);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nlicense_plate_frame();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Face down on build plate\r\n// Supports: None needed\r\n// Layer height: 0.2-0.3mm\r\n// Infill: 20-25% for durability\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Light deburring of mounting holes",
      "files": {
        "metadata": "objects/license-plate-frame/metadata.json",
        "readme": "objects/license-plate-frame/README.md",
        "template": "objects/license-plate-frame/template.scad"
      }
    },
    {
      "id": "pen-holder",
      "name": "pen-holder",
      "description": "Desktop organizer",
      "category": "office",
      "tags": [
        "office",
        "pen",
        "organizer",
        "desk",
        "stationery"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Pen Holder\r\n\r\nA desktop organizer with radial pen slots and optional center compartment.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable outer diameter and height\r\n- Variable number of pen slots\r\n- Customizable pen diameter\r\n- Optional center storage compartment\r\n- Configurable wall thickness\r\n\r\n**Usage:**\r\n\r\n1. Measure your pen diameter for snug fit\r\n2. Set slot count based on your collection\r\n3. Enable center compartment for additional storage\r\n4. Print bottom-down, no supports needed",
      "template": "// ============================================================================\r\n// Desktop Pen Organizer\r\n// Purpose: Cylindrical body with radial pen slots.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nouter_diameter = 80;      // holder outer diameter (mm)\r\nholder_height = 60;       // holder height (mm)\r\nslot_count = 8;           // number of pen slots\r\npen_diameter = 10;        // pen diameter (mm)\r\ncenter_compartment_enabled = true; // add center storage\r\nwall_thickness = 3;       // wall thickness (mm)\r\nclearance = 0.3;          // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(outer_diameter > 0 && holder_height > 0, \"Holder dims > 0\");\r\nassert(slot_count >= 1, \"At least one slot\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_diameter = outer_diameter - 2*wall_thickness;\r\nslot_radius = (outer_diameter/2) - wall_thickness - (pen_diameter/2) - 2;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule pen_holder_rotary() {\r\n  difference() {\r\n    // Outer cylinder\r\n    cylinder(d=outer_diameter, h=holder_height, $fn=128);\r\n\r\n    // Hollow body\r\n    if (wall_thickness > 0) {\r\n      translate([0,0,2])\r\n        cylinder(d=inner_diameter, h=holder_height - 2, $fn=128);\r\n    }\r\n\r\n    // Radial pen slots\r\n    for (i = [0:slot_count-1]) {\r\n      angle = 360/slot_count * i;\r\n      translate([slot_radius * cos(angle), slot_radius * sin(angle), -0.5])\r\n        cylinder(d=pen_diameter + clearance, h=holder_height + 1, $fn=64);\r\n    }\r\n\r\n    // Optional center compartment\r\n    if (center_compartment_enabled && wall_thickness > 0) {\r\n      translate([0,0,2])\r\n        cylinder(d=(inner_diameter/2), h=holder_height - 4, $fn=96);\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\npen_holder_rotary();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Bottom down on build plate\r\n// Supports: None needed\r\n// Layer height: 0.2mm for smooth surfaces\r\n// Infill: 15-20% sufficient for desk use\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit pens, smooth interior if needed",
      "files": {
        "metadata": "objects/pen-holder/metadata.json",
        "readme": "objects/pen-holder/README.md",
        "template": "objects/pen-holder/template.scad"
      }
    },
    {
      "id": "phone-mount",
      "name": "phone-mount",
      "description": "Car dashboard or desk phone holder with secure grip, tilt adjustment, and charging port access",
      "category": "electronics",
      "tags": [
        "phone",
        "mount",
        "car",
        "dashboard",
        "desk",
        "adjustable",
        "professional",
        "charging",
        "grip"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Phone Mount\r\n\r\nAn adjustable phone mount with ball joint and clamp system.\r\n\r\n**Parametric features:**\r\n\r\n- Customizable clamp dimensions for different phone sizes\r\n- Adjustable arm length\r\n- Variable ball joint size for different mounting systems\r\n- Configurable grip strength\r\n\r\n**Usage:**\r\n\r\n1. Measure your phone width and thickness\r\n2. Adjust clamp opening for secure fit\r\n3. Print with supports for ball socket overhangs\r\n4. Test ball joint operation, sand if needed for smooth movement",
      "template": "// ============================================================================\r\n// Professional Phone Mount - Car Dashboard/Desk Mount\r\n// Purpose: Adjustable phone holder with secure grip and tilt mechanism\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nphone_width = 80;         // phone width (mm) - iPhone 14: 71.5mm, Samsung S23: 70.9mm\r\nphone_thickness = 12;     // phone thickness with case (mm)\r\nmount_base_width = 100;   // base plate width for stability (mm)\r\nmount_base_depth = 80;    // base plate depth (mm) \r\narm_height = 60;          // height of mounting arm (mm)\r\ntilt_angle = 15;          // viewing angle tilt (degrees)\r\ngrip_depth = 15;          // how deep the side grips go (mm)\r\nbottom_support_height = 8; // height of bottom phone rest (mm)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(phone_width >= 60 && phone_width <= 100, \"Phone width should be 60-100mm\");\r\nassert(phone_thickness >= 8 && phone_thickness <= 20, \"Phone thickness should be 8-20mm\");\r\nassert(tilt_angle >= 0 && tilt_angle <= 45, \"Tilt angle should be 0-45 degrees\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nwall_thickness = 3;\r\ntolerance = 0.5;\r\nphone_cradle_width = phone_width + tolerance;\r\nphone_cradle_depth = phone_thickness + tolerance;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\n\r\nmodule base_plate() {\r\n    // Stable base with rounded corners\r\n    hull() {\r\n        translate([5, 5, 0]) cylinder(r=5, h=4);\r\n        translate([mount_base_width-5, 5, 0]) cylinder(r=5, h=4);\r\n        translate([5, mount_base_depth-5, 0]) cylinder(r=5, h=4);\r\n        translate([mount_base_width-5, mount_base_depth-5, 0]) cylinder(r=5, h=4);\r\n    }\r\n    \r\n    // Cable management groove\r\n    translate([mount_base_width/2 - 3, 0, 0])\r\n        cube([6, mount_base_depth, 2]);\r\n}\r\n\r\nmodule mounting_arm() {\r\n    // Vertical support arm\r\n    translate([mount_base_width/2 - wall_thickness/2, mount_base_depth - 15, 4])\r\n        cube([wall_thickness + 6, 15, arm_height]);\r\n}\r\n\r\nmodule phone_cradle() {\r\n    // Main cradle body\r\n    difference() {\r\n        // Outer shell\r\n        cube([phone_cradle_width + 2*wall_thickness, \r\n              phone_cradle_depth + wall_thickness, \r\n              40]);\r\n        \r\n        // Phone cavity\r\n        translate([wall_thickness, wall_thickness, bottom_support_height])\r\n            cube([phone_cradle_width, phone_cradle_depth + 1, 50]);\r\n    }\r\n    \r\n    // Side grips for security\r\n    translate([-2, 0, bottom_support_height + 10]) {\r\n        cube([wall_thickness + 2, phone_cradle_depth + wall_thickness, 20]);\r\n    }\r\n    translate([phone_cradle_width + wall_thickness, 0, bottom_support_height + 10]) {\r\n        cube([wall_thickness + 2, phone_cradle_depth + wall_thickness, 20]);\r\n    }\r\n    \r\n    // Charging port access\r\n    translate([phone_cradle_width/2 - 8, -1, 0])\r\n        cube([16, wall_thickness + 2, bottom_support_height + 5]);\r\n}\r\n\r\nmodule complete_phone_mount() {\r\n    // Base plate\r\n    base_plate();\r\n    \r\n    // Mounting arm\r\n    mounting_arm();\r\n    \r\n    // Phone cradle with tilt\r\n    translate([mount_base_width/2 - phone_cradle_width/2 - wall_thickness, \r\n               mount_base_depth - 15, \r\n               arm_height + 4]) {\r\n        rotate([tilt_angle, 0, 0])\r\n            phone_cradle();\r\n    }\r\n    \r\n    // Support brackets\r\n    hull() {\r\n        translate([mount_base_width/2 - 10, mount_base_depth - 15, 4])\r\n            cube([20, 15, 5]);\r\n        translate([mount_base_width/2 - phone_cradle_width/2 - wall_thickness, \r\n                   mount_base_depth - 15, \r\n                   arm_height])\r\n            cube([phone_cradle_width + 2*wall_thickness, 15, 4]);\r\n    }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncomplete_phone_mount();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Ball socket up, clamp down on build plate\r\n// Supports: Yes, for overhangs in ball socket area\r\n// Layer height: 0.2mm for better detail on ball joint\r\n// Infill: 25-30% for strength in moving parts\r\n// Print speed: Slower (40mm/s) for better surface finish\r\n// Post-processing: Test fit ball joint, may need light sanding for smooth operation",
      "files": {
        "metadata": "objects/phone-mount/metadata.json",
        "readme": "objects/phone-mount/README.md",
        "template": "objects/phone-mount/template.scad"
      }
    },
    {
      "id": "plant-pot",
      "name": "plant-pot",
      "description": "Custom planter",
      "category": "garden",
      "tags": [
        "garden",
        "plant",
        "pot",
        "planter",
        "drainage"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Plant Pot\r\n\r\nA tapered planter with drainage holes and optional saucer.\r\n\r\n**Parametric features:**\r\n\r\n- Adjustable pot diameter and height\r\n- Automatic tapered design\r\n- Configurable drainage holes\r\n- Optional matching saucer\r\n\r\n**Usage:**\r\n\r\n1. Choose pot size for your plant\r\n2. Set drainage hole count for plant type\r\n3. Enable saucer to protect surfaces\r\n4. Print right-side up, test drainage holes are clear",
      "template": "// ============================================================================\r\n// Custom Plant Pot\r\n// Purpose: Tapered pot with drainage; optional saucer.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nouter_diameter = 120;     // pot outer diameter (mm)\r\npot_height = 100;         // pot height (mm)\r\nwall_thickness = 3;       // wall thickness (mm)\r\ndrain_hole_count = 5;     // number of drainage holes\r\ndrain_hole_diameter = 8;  // drainage hole diameter (mm)\r\ninclude_saucer = true;    // include matching saucer\r\nclearance = 0.3;          // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(outer_diameter > 0 && pot_height > 0, \"pot dims > 0\");\r\nassert(wall_thickness >= 0, \"wall_thickness ≥ 0\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_diameter = outer_diameter - 2*wall_thickness;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule plant_pot() {\r\n  // Tapered outer\r\n  difference() {\r\n    cylinder(d1=outer_diameter * 0.9, d2=outer_diameter, h=pot_height, $fn=128);\r\n\r\n    // Hollow\r\n    if (wall_thickness > 0) {\r\n      translate([0,0,2])\r\n        cylinder(d1=inner_diameter * 0.9, d2=inner_diameter, h=pot_height - 2, $fn=128);\r\n    }\r\n\r\n    // Drainage holes on bottom\r\n    if (drain_hole_count > 0 && drain_hole_diameter > 0) {\r\n      radius = (outer_diameter/2) * 0.5;\r\n      for (i = [0:drain_hole_count-1]) {\r\n        angle = 360/drain_hole_count * i;\r\n        translate([radius * cos(angle), radius * sin(angle), -0.5])\r\n          cylinder(d=drain_hole_diameter + clearance, h=3, $fn=48);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Saucer\r\n  if (include_saucer) {\r\n    translate([0, 0, -8])\r\n      difference() {\r\n        cylinder(d=outer_diameter + 10, h=8, $fn=128);\r\n        translate([0,0,2])\r\n          cylinder(d=outer_diameter + 2, h=6, $fn=128);\r\n      }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nplant_pot();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Right-side up (bottom on build plate)\r\n// Supports: None needed\r\n// Layer height: 0.2-0.3mm\r\n// Infill: 15-20% sufficient for planters\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test drainage holes are clear, drill if needed",
      "files": {
        "metadata": "objects/plant-pot/metadata.json",
        "readme": "objects/plant-pot/README.md",
        "template": "objects/plant-pot/template.scad"
      }
    },
    {
      "id": "precision-bearing",
      "name": "precision-bearing",
      "description": "Custom ball bearing with configurable races and tolerances",
      "category": "Mechanical",
      "tags": [
        "bearing",
        "precision",
        "mechanical",
        "engineering",
        "rotation"
      ],
      "difficulty": "Expert",
      "estimated_time": "30-60 minutes",
      "readme": "# Precision Bearing\r\n\r\nCustom parametric ball bearing system with configurable dimensions and precision tolerances.\r\n\r\n## Applications\r\n- High-precision mechanical assemblies\r\n- Custom machinery and equipment\r\n- Replacement bearings for unique applications\r\n- Educational demonstration models",
      "template": "/*\r\n * ================================================================\r\n * PARAMETRIC PRECISION BEARING\r\n * Custom ball bearing with configurable races and tolerances\r\n * ================================================================\r\n */\r\n\r\n/* ----------------------------- USER PARAMETERS ----------------------------- */\r\n\r\n// Bearing Dimensions\r\ninner_diameter = 15;       // Inner race diameter (mm)\r\nouter_diameter = 35;       // Outer race diameter (mm)  \r\nbearing_width = 11;        // Bearing width (mm)\r\nball_count = 8;            // Number of ball bearings\r\n\r\n// Precision Settings\r\nbearing_tolerance = 0.1;   // Bearing clearance (mm)\r\nrace_depth = 2;            // Ball race groove depth (mm)\r\nsurface_finish = \"smooth\"; // \"smooth\", \"polished\", \"textured\"\r\n\r\n// Advanced Features\r\nsealed_bearing = true;     // Include dust seals\r\nlubrication_ports = true; // Add grease fittings\r\ncage_material = \"PETG\";    // Cage material type\r\n\r\n/* ----------------------------- MAIN GEOMETRY ----------------------------- */\r\n\r\nmodule precision_bearing() {\r\n    // Inner race\r\n    inner_race();\r\n    \r\n    // Outer race\r\n    outer_race();\r\n    \r\n    // Ball cage\r\n    translate([0, 0, bearing_width/2])\r\n        ball_cage();\r\n    \r\n    // Seals\r\n    if (sealed_bearing) {\r\n        translate([0, 0, -1])\r\n            bearing_seal();\r\n        translate([0, 0, bearing_width + 1])\r\n            bearing_seal();\r\n    }\r\n}\r\n\r\nmodule inner_race() {\r\n    difference() {\r\n        cylinder(d=inner_diameter + 8, h=bearing_width);\r\n        \r\n        // Center hole\r\n        translate([0, 0, -1])\r\n            cylinder(d=inner_diameter, h=bearing_width + 2);\r\n        \r\n        // Ball race groove\r\n        translate([0, 0, bearing_width/2])\r\n            rotate_extrude()\r\n                translate([inner_diameter/2 + 4, 0])\r\n                    circle(d=race_depth * 2);\r\n    }\r\n}\r\n\r\nmodule outer_race() {\r\n    difference() {\r\n        cylinder(d=outer_diameter, h=bearing_width);\r\n        \r\n        // Inner cutout\r\n        translate([0, 0, -1])\r\n            cylinder(d=outer_diameter - 8, h=bearing_width + 2);\r\n        \r\n        // Ball race groove\r\n        translate([0, 0, bearing_width/2])\r\n            rotate_extrude()\r\n                translate([outer_diameter/2 - 4, 0])\r\n                    circle(d=race_depth * 2);\r\n        \r\n        // Lubrication port\r\n        if (lubrication_ports) {\r\n            translate([outer_diameter/2 - 2, 0, bearing_width/2])\r\n                rotate([0, 90, 0])\r\n                    cylinder(d=2, h=4);\r\n        }\r\n    }\r\n}\r\n\r\nmodule ball_cage() {\r\n    difference() {\r\n        cylinder(d=(inner_diameter + outer_diameter)/2, h=2, center=true);\r\n        \r\n        // Ball pockets\r\n        for (i = [0:ball_count-1]) {\r\n            rotate([0, 0, i * 360/ball_count])\r\n                translate([(inner_diameter + outer_diameter)/4, 0, 0])\r\n                    sphere(d=race_depth * 1.5);\r\n        }\r\n    }\r\n}\r\n\r\nmodule bearing_seal() {\r\n    difference() {\r\n        cylinder(d=outer_diameter - 2, h=1);\r\n        cylinder(d=inner_diameter + 2, h=3, center=true);\r\n    }\r\n}\r\n\r\nprecision_bearing();",
      "files": {
        "metadata": "objects/precision-bearing/metadata.json",
        "readme": "objects/precision-bearing/README.md",
        "template": "objects/precision-bearing/template.scad"
      }
    },
    {
      "id": "prosthetic-hand",
      "name": "prosthetic-hand",
      "description": "Functional prosthetic with tendon-driven fingers",
      "category": "Medical",
      "tags": [
        "prosthetic",
        "medical",
        "assistive",
        "functional",
        "tendon"
      ],
      "difficulty": "Expert",
      "estimated_time": "30-60 minutes",
      "readme": "# Prosthetic Hand\r\n\r\nAdvanced parametric prosthetic hand with tendon-driven actuation system for functional grip and manipulation.\r\n\r\n## Features\r\n- Customizable hand and finger dimensions\r\n- Tendon-driven mechanical system\r\n- Configurable joint flexibility\r\n- Multiple wrist attachment options\r\n\r\n## Medical Applications\r\n- Upper limb prosthetics\r\n- Assistive device development\r\n- Rehabilitation training tools\r\n- Research and development platforms",
      "template": "/*\r\n * ================================================================\r\n * PARAMETRIC PROSTHETIC HAND\r\n * Functional prosthetic with tendon-driven fingers\r\n * ================================================================\r\n */\r\n\r\n/* ----------------------------- USER PARAMETERS ----------------------------- */\r\n\r\n// Hand Dimensions\r\nhand_length = 180;         // Total hand length (mm)\r\npalm_width = 85;           // Palm width (mm)\r\nfinger_count = 5;          // Number of fingers\r\nthumb_included = true;     // Include opposable thumb\r\n\r\n// Finger Configuration\r\nfinger_segments = 3;       // Segments per finger\r\nsegment_length = 30;       // Average segment length (mm)\r\njoint_flexibility = 45;    // Joint bend angle (degrees)\r\n\r\n// Mechanical System\r\nactuation_type = \"tendon\";  // \"tendon\", \"servo\", \"hybrid\"\r\ngrip_strength = 15;         // Target grip strength (N)\r\nwrist_attachment = \"socket\"; // \"socket\", \"clamp\", \"custom\"\r\n\r\n/* ----------------------------- MAIN GEOMETRY ----------------------------- */\r\n\r\nmodule prosthetic_hand() {\r\n    // Palm assembly\r\n    palm_base();\r\n    \r\n    // Fingers\r\n    for (i = [0:finger_count-2]) {\r\n        translate([palm_width/finger_count * (i - (finger_count-2)/2), hand_length * 0.7, 0])\r\n            finger_assembly(i);\r\n    }\r\n    \r\n    // Thumb\r\n    if (thumb_included) {\r\n        translate([palm_width/2 - 10, hand_length * 0.3, 15])\r\n            rotate([0, 0, -45])\r\n                thumb_assembly();\r\n    }\r\n    \r\n    // Wrist connection\r\n    translate([0, -20, 0])\r\n        wrist_connector();\r\n}\r\n\r\nmodule palm_base() {\r\n    difference() {\r\n        hull() {\r\n            translate([0, 0, 0])\r\n                cube([palm_width, hand_length * 0.6, 15], center=true);\r\n            translate([0, hand_length * 0.3, 0])\r\n                cube([palm_width * 0.8, 20, 15], center=true);\r\n        }\r\n        \r\n        // Tendon channels\r\n        for (i = [0:finger_count-1]) {\r\n            translate([palm_width/finger_count * (i - (finger_count-1)/2), -hand_length * 0.2, -5])\r\n                cylinder(d=3, h=20);\r\n        }\r\n    }\r\n}\r\n\r\nmodule finger_assembly(finger_id) {\r\n    for (segment = [0:finger_segments-1]) {\r\n        translate([0, segment * segment_length * 1.1, 0])\r\n            rotate([segment * joint_flexibility/finger_segments, 0, 0])\r\n                finger_segment(segment);\r\n    }\r\n}\r\n\r\nmodule finger_segment(segment_id) {\r\n    difference() {\r\n        // Main segment\r\n        hull() {\r\n            cube([12, segment_length, 10], center=true);\r\n            translate([0, segment_length/2, 0])\r\n                cube([10, 2, 10], center=true);\r\n        }\r\n        \r\n        // Joint hole\r\n        translate([0, -segment_length/2, 0])\r\n            rotate([0, 90, 0])\r\n                cylinder(d=2, h=15, center=true);\r\n        \r\n        // Tendon channel\r\n        translate([0, 0, -3])\r\n            cube([2, segment_length + 2, 8], center=true);\r\n    }\r\n    \r\n    // Joint pin\r\n    if (segment_id > 0) {\r\n        translate([0, -segment_length/2, 0])\r\n            rotate([0, 90, 0])\r\n                cylinder(d=1.8, h=14, center=true);\r\n    }\r\n}\r\n\r\nmodule thumb_assembly() {\r\n    for (segment = [0:2]) {\r\n        translate([0, segment * 25, 0])\r\n            rotate([segment * 30, 0, 0])\r\n                thumb_segment();\r\n    }\r\n}\r\n\r\nmodule thumb_segment() {\r\n    difference() {\r\n        cube([15, 25, 12], center=true);\r\n        \r\n        // Tendon channel\r\n        translate([0, 0, -4])\r\n            cube([2, 27, 6], center=true);\r\n    }\r\n}\r\n\r\nmodule wrist_connector() {\r\n    if (wrist_attachment == \"socket\") {\r\n        difference() {\r\n            cylinder(d=50, h=30);\r\n            translate([0, 0, 5])\r\n                cylinder(d=45, h=30);\r\n        }\r\n    }\r\n}\r\n\r\nprosthetic_hand();",
      "files": {
        "metadata": "objects/prosthetic-hand/metadata.json",
        "readme": "objects/prosthetic-hand/README.md",
        "template": "objects/prosthetic-hand/template.scad"
      }
    },
    {
      "id": "raspberry-pi-case",
      "name": "raspberry-pi-case",
      "description": "Protective enclosure for Raspberry Pi boards",
      "category": "electronics",
      "tags": [
        "raspberry pi",
        "case",
        "electronics",
        "protection",
        "enclosure"
      ],
      "difficulty": "Medium",
      "estimated_time": "30-60 minutes",
      "readme": "# Raspberry Pi Case\r\n\r\nA comprehensive protective enclosure for various Raspberry Pi board models with proper cooling and port access.\r\n\r\n## Features\r\n\r\n- **Multi-Model Support**: Compatible with Pi 4B, 3B+, Zero, and more\r\n- **Port Access**: Precise cutouts for all ports and connectors\r\n- **Cooling Design**: Ventilation holes for optimal thermal management\r\n- **Secure Mounting**: Built-in posts for proper board mounting\r\n- **Professional Finish**: Clean, functional design suitable for any environment\r\n\r\n## Usage\r\n\r\n1. Select your Raspberry Pi model from the board_type parameter\r\n2. Choose whether to include a separate lid\r\n3. Adjust wall thickness for desired protection level\r\n4. Enable/disable ventilation based on cooling needs\r\n5. Print both bottom case and lid (if selected)\r\n\r\n## Supported Models\r\n\r\n- **Raspberry Pi 4B**: Full-size with all port cutouts\r\n- **Raspberry Pi 3B+**: Compatible with 4B design\r\n- **Raspberry Pi Zero**: Compact version with appropriate scaling\r\n- **Custom**: Modify dimensions for other variants\r\n\r\n## Printing Guide\r\n\r\n- **Orientation**: Bottom upright, lid face-down separately\r\n- **Supports**: None required for either piece\r\n- **Layer Height**: 0.2mm for clean port cutouts\r\n- **Infill**: 20-25% for adequate protection\r\n- **Material**: PLA for indoor use, ABS/PETG for demanding environments\r\n\r\n## Assembly\r\n\r\n1. Test fit your Pi board in the bottom case\r\n2. Ensure all ports align properly with cutouts\r\n3. Mount Pi using the built-in mounting posts\r\n4. Attach lid with friction fit or add screws if desired",
      "template": "// ============================================================================\r\n// Raspberry Pi Case\r\n// Purpose: Protective enclosure for Raspberry Pi boards\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nboard_type = \"4B\";           // \"4B\", \"3B+\", \"Zero\", \"Pico\"\r\ninclude_lid = true;          // generate separate lid\r\nwall_thickness = 2;          // case wall thickness (mm)\r\nbottom_thickness = 2;        // case bottom thickness (mm)\r\nclearance = 0.5;            // clearance around board (mm)\r\nport_clearance = 1;         // extra clearance for ports (mm)\r\nventilation_holes = true;    // include cooling holes\r\nmounting_posts = true;       // include board mounting posts\r\n\r\n/* ------------------------- Board Dimensions (don't edit) ------------------------ */\r\n// Raspberry Pi 4B dimensions\r\nboard_length_4B = 85;\r\nboard_width_4B = 56;\r\nboard_height_4B = 1.6;\r\n\r\n// Raspberry Pi Zero dimensions  \r\nboard_length_Zero = 65;\r\nboard_width_Zero = 30;\r\nboard_height_Zero = 1.6;\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nboard_length = (board_type == \"4B\" || board_type == \"3B+\") ? board_length_4B : \r\n               (board_type == \"Zero\") ? board_length_Zero : board_length_4B;\r\nboard_width = (board_type == \"4B\" || board_type == \"3B+\") ? board_width_4B : \r\n              (board_type == \"Zero\") ? board_width_Zero : board_width_4B;\r\n\r\ncase_length = board_length + 2*clearance + 2*wall_thickness;\r\ncase_width = board_width + 2*clearance + 2*wall_thickness;\r\ncase_height = 25; // Sufficient for most Pi configurations\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule pi_case_bottom() {\r\n    difference() {\r\n        // Outer shell\r\n        cube([case_length, case_width, case_height]);\r\n        \r\n        // Inner cavity\r\n        translate([wall_thickness, wall_thickness, bottom_thickness]) {\r\n            cube([board_length + 2*clearance, board_width + 2*clearance, case_height]);\r\n        }\r\n        \r\n        // Port cutouts for Pi 4B\r\n        if (board_type == \"4B\" || board_type == \"3B+\") {\r\n            // USB ports\r\n            translate([case_length - wall_thickness - 1, 12, bottom_thickness + 3]) {\r\n                cube([wall_thickness + 2, 16, 8]);\r\n            }\r\n            translate([case_length - wall_thickness - 1, 30, bottom_thickness + 3]) {\r\n                cube([wall_thickness + 2, 16, 8]);\r\n            }\r\n            \r\n            // Ethernet port\r\n            translate([case_length - wall_thickness - 1, 48, bottom_thickness + 3]) {\r\n                cube([wall_thickness + 2, 16, 12]);\r\n            }\r\n            \r\n            // HDMI ports\r\n            translate([15, -1, bottom_thickness + 2]) {\r\n                cube([16, wall_thickness + 2, 8]);\r\n            }\r\n            translate([35, -1, bottom_thickness + 2]) {\r\n                cube([16, wall_thickness + 2, 8]);\r\n            }\r\n            \r\n            // Power port\r\n            translate([2, -1, bottom_thickness + 2]) {\r\n                cube([10, wall_thickness + 2, 6]);\r\n            }\r\n        }\r\n        \r\n        // Ventilation holes\r\n        if (ventilation_holes) {\r\n            for (x = [wall_thickness + 10 : 8 : case_length - wall_thickness - 10]) {\r\n                for (y = [wall_thickness + 8 : 8 : case_width - wall_thickness - 8]) {\r\n                    translate([x, y, -0.5]) {\r\n                        cylinder(d=3, h=bottom_thickness + 1, $fn=16);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    // Mounting posts\r\n    if (mounting_posts) {\r\n        post_positions = (board_type == \"4B\" || board_type == \"3B+\") ? \r\n            [[3.5, 3.5], [61.5, 3.5], [3.5, 52.5], [61.5, 52.5]] :\r\n            [[3.5, 3.5], [61.5, 3.5], [3.5, 26.5], [61.5, 26.5]];\r\n            \r\n        for (pos = post_positions) {\r\n            translate([wall_thickness + clearance + pos[0], wall_thickness + clearance + pos[1], bottom_thickness]) {\r\n                difference() {\r\n                    cylinder(d=6, h=board_height_4B + 2, $fn=32);\r\n                    translate([0, 0, board_height_4B + 1]) {\r\n                        cylinder(d=2.5, h=2, $fn=16);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule pi_case_lid() {\r\n    difference() {\r\n        cube([case_length, case_width, wall_thickness + 3]);\r\n        \r\n        // Inner recess\r\n        translate([1, 1, wall_thickness]) {\r\n            cube([case_length - 2, case_width - 2, 4]);\r\n        }\r\n        \r\n        // Ventilation holes\r\n        if (ventilation_holes) {\r\n            for (x = [10 : 8 : case_length - 10]) {\r\n                for (y = [8 : 8 : case_width - 8]) {\r\n                    translate([x, y, -0.5]) {\r\n                        cylinder(d=3, h=wall_thickness + 1, $fn=16);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\npi_case_bottom();\r\n\r\nif (include_lid) {\r\n    translate([case_length + 10, 0, 0]) {\r\n        pi_case_lid();\r\n    }\r\n}\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Bottom piece upright, lid face-down\r\n// Supports: None needed\r\n// Layer height: 0.2mm for good detail\r\n// Infill: 20-25% sufficient\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test board fit before final assembly",
      "files": {
        "metadata": "objects/raspberry-pi-case/metadata.json",
        "readme": "objects/raspberry-pi-case/README.md",
        "template": "objects/raspberry-pi-case/template.scad"
      }
    },
    {
      "id": "robotic-gripper",
      "name": "robotic-gripper",
      "description": "Servo-actuated gripper with customizable finger geometry",
      "category": "Robotics",
      "tags": [
        "robotics",
        "gripper",
        "servo",
        "automation",
        "mechanical"
      ],
      "difficulty": "Advanced",
      "estimated_time": "30-60 minutes",
      "readme": "# Robotic Gripper\r\n\r\nParametric servo-actuated gripper for robotic applications with customizable finger geometry and sensor integration.\r\n\r\n## Features\r\n- Multiple servo compatibility\r\n- Configurable grip width and finger shapes\r\n- Optional pressure sensors\r\n- Mechanical advantage system\r\n\r\n## Applications\r\n- Robotic arms and automation\r\n- Pick-and-place systems\r\n- Educational robotics\r\n- Prosthetic devices",
      "template": "/*\r\n * ================================================================\r\n * PARAMETRIC ROBOTIC GRIPPER\r\n * Servo-actuated gripper with customizable finger geometry\r\n * ================================================================\r\n */\r\n\r\n/* ----------------------------- USER PARAMETERS ----------------------------- */\r\n\r\n// Gripper Dimensions\r\ngrip_width = 80;           // Maximum grip opening (mm)\r\nfinger_length = 60;        // Length of gripper fingers (mm)\r\nfinger_thickness = 8;      // Thickness of fingers (mm)\r\nbase_width = 50;           // Width of gripper base (mm)\r\nbase_height = 40;          // Height of gripper base (mm)\r\n\r\n// Servo Configuration\r\nservo_type = \"SG90\";       // Servo type: \"SG90\", \"MG996R\", \"Custom\"\r\nservo_mount_spacing = 23;  // Distance between servo mounting holes (mm)\r\nservo_horn_diameter = 25;  // Diameter of servo horn (mm)\r\n\r\n// Finger Design\r\nfinger_tip_shape = \"pointed\"; // \"pointed\", \"flat\", \"rounded\", \"custom\"\r\ngrip_surface = \"textured\";    // \"smooth\", \"textured\", \"ridged\"\r\nfinger_angle = 15;            // Angle of finger taper (degrees)\r\n\r\n// Mechanical Features\r\ngear_ratio = 2;            // Mechanical advantage ratio\r\njaw_force = 10;            // Target gripping force (N)\r\ninclude_sensors = true;    // Add pressure sensor mounts\r\nquick_release = true;      // Include quick-release mechanism\r\n\r\n/* ----------------------------- MAIN GEOMETRY ----------------------------- */\r\n\r\nmodule robotic_gripper() {\r\n    union() {\r\n        // Base assembly\r\n        gripper_base();\r\n        \r\n        // Servo mount\r\n        translate([0, -base_width/2 - 10, base_height/2])\r\n            rotate([90, 0, 0])\r\n                servo_mount();\r\n        \r\n        // Gripper arms\r\n        translate([0, 0, base_height])\r\n            gripper_mechanism();\r\n    }\r\n}\r\n\r\nmodule gripper_base() {\r\n    difference() {\r\n        cube([base_width, base_width, base_height], center=true);\r\n        \r\n        // Servo cutout\r\n        translate([0, -base_width/2 + 5, 5])\r\n            cube([25, 15, 25], center=true);\r\n        \r\n        // Wiring channel\r\n        translate([0, 0, -base_height/2 + 2])\r\n            cylinder(d=8, h=4);\r\n    }\r\n}\r\n\r\nmodule servo_mount() {\r\n    difference() {\r\n        cube([40, 20, 30], center=true);\r\n        \r\n        // Servo body cutout\r\n        cube([23, 12, 28], center=true);\r\n        \r\n        // Mounting holes\r\n        for (x = [-servo_mount_spacing/2, servo_mount_spacing/2]) {\r\n            translate([x, 0, -12])\r\n                cylinder(d=2, h=8);\r\n        }\r\n    }\r\n}\r\n\r\nmodule gripper_mechanism() {\r\n    // Left finger assembly\r\n    translate([-grip_width/4, 0, 0])\r\n        gripper_finger(\"left\");\r\n    \r\n    // Right finger assembly  \r\n    translate([grip_width/4, 0, 0])\r\n        gripper_finger(\"right\");\r\n    \r\n    // Linkage mechanism\r\n    gripper_linkage();\r\n}\r\n\r\nmodule gripper_finger(side) {\r\n    rotate([0, 0, side == \"left\" ? finger_angle : -finger_angle]) {\r\n        difference() {\r\n            // Main finger body\r\n            cube([finger_thickness, finger_length, 15], center=true);\r\n            \r\n            // Grip surface texture\r\n            if (grip_surface == \"textured\") {\r\n                for (i = [0:3:finger_length-5]) {\r\n                    translate([0, -finger_length/2 + i, 6])\r\n                        cube([finger_thickness+1, 2, 2], center=true);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Finger tip\r\n        translate([0, finger_length/2, 0])\r\n            finger_tip();\r\n        \r\n        // Pressure sensor mount\r\n        if (include_sensors) {\r\n            translate([0, finger_length/3, 8])\r\n                cube([12, 8, 3], center=true);\r\n        }\r\n    }\r\n}\r\n\r\nmodule finger_tip() {\r\n    if (finger_tip_shape == \"pointed\") {\r\n        cylinder(d1=finger_thickness, d2=2, h=10, center=true);\r\n    } else if (finger_tip_shape == \"flat\") {\r\n        cube([finger_thickness, 3, 15], center=true);\r\n    } else if (finger_tip_shape == \"rounded\") {\r\n        sphere(d=finger_thickness);\r\n    }\r\n}\r\n\r\nmodule gripper_linkage() {\r\n    // Connecting rods\r\n    for (side = [-1, 1]) {\r\n        translate([side * 15, -20, 0]) {\r\n            rotate([0, 90, 0])\r\n                cylinder(d=4, h=20, center=true);\r\n        }\r\n    }\r\n    \r\n    // Servo connection\r\n    translate([0, -30, 0])\r\n        cylinder(d=servo_horn_diameter, h=5, center=true);\r\n}\r\n\r\nrobotic_gripper();",
      "files": {
        "metadata": "objects/robotic-gripper/metadata.json",
        "readme": "objects/robotic-gripper/README.md",
        "template": "objects/robotic-gripper/template.scad"
      }
    },
    {
      "id": "storage-box",
      "name": "storage-box",
      "description": "Modular container",
      "category": "storage",
      "tags": [
        "storage",
        "box",
        "modular",
        "container",
        "organizing"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Storage Box\r\n\r\nA modular container with optional dividers and stacking features.\r\n\r\n**Parametric features:**\r\n\r\n- Customizable box dimensions\r\n- Optional internal dividers\r\n- Stackable design with lips\r\n- Adjustable wall thickness\r\n\r\n**Usage:**\r\n\r\n1. Plan your storage needs and set box dimensions\r\n2. Enable dividers for organization\r\n3. Use stackable feature for modular storage systems\r\n4. Print bottom-down for best strength",
      "template": "// ============================================================================\r\n// Modular Storage Container\r\n// Purpose: Box with optional dividers and stack lips.\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nbox_length = 120;         // box length (mm)\r\nbox_width = 80;           // box width (mm)\r\nbox_height = 40;          // box height (mm)\r\nwall_thickness = 2;       // wall thickness (mm)\r\ndividers_enabled = true;  // include dividers\r\ndivider_count = 2;        // number of dividers\r\nstackable = true;         // include stacking lips\r\nclearance = 0.25;         // fit tolerance\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(box_length > 0 && box_width > 0 && box_height > 0, \"box dims > 0\");\r\nassert(wall_thickness >= 0, \"wall_thickness ≥ 0\");\r\nassert(divider_count >= 0, \"divider_count ≥ 0\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\ninner_length = box_length - 2*wall_thickness;\r\ninner_width  = box_width  - 2*wall_thickness;\r\ninner_height = box_height - wall_thickness;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule storage_box_modular() {\r\n  difference() {\r\n    // Outer shell\r\n    cube([box_length, box_width, box_height], center=false);\r\n\r\n    // Hollow\r\n    if (wall_thickness > 0) {\r\n      translate([wall_thickness, wall_thickness, wall_thickness])\r\n        cube([inner_length, inner_width, inner_height], center=false);\r\n    }\r\n\r\n    // Stack lip (simple ledge)\r\n    if (stackable) {\r\n      translate([0,0,box_height - 2])\r\n        difference() {\r\n          cube([box_length, box_width, 2], center=false);\r\n          translate([1.2,1.2,-0.5]) cube([box_length - 2.4, box_width - 2.4, 3], center=false);\r\n        }\r\n    }\r\n\r\n    // Dividers (vertical in length direction)\r\n    if (dividers_enabled && divider_count > 0 && inner_length > 10) {\r\n      pitch = inner_length / (divider_count + 1);\r\n      for (i = [1:divider_count]) {\r\n        translate([wall_thickness + i*pitch - 0.5, wall_thickness, wall_thickness])\r\n          cube([1.0, inner_width, inner_height], center=false);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nstorage_box_modular();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Bottom down on build plate\r\n// Supports: None needed\r\n// Layer height: 0.2-0.3mm\r\n// Infill: 15-20% for light storage use\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test stacking fit if using stackable feature",
      "files": {
        "metadata": "objects/storage-box/metadata.json",
        "readme": "objects/storage-box/README.md",
        "template": "objects/storage-box/template.scad"
      }
    },
    {
      "id": "switch-holder",
      "name": "switch-holder",
      "description": "Panel-mount switch housing for electronics",
      "category": "electronics",
      "tags": [
        "electronics",
        "switch",
        "panel",
        "mount",
        "housing"
      ],
      "difficulty": "Easy",
      "estimated_time": "30-60 minutes",
      "readme": "# Switch Holder\r\n\r\nPanel-mount switch housing for clean integration of switches in electronic project panels.\r\n\r\n## Features\r\n\r\n- **Universal Fit**: Adjustable switch diameter for various switch types\r\n- **Panel Integration**: Designed to mount flush with panels of any thickness\r\n- **Secure Mounting**: Optional mounting tabs for extra stability\r\n- **Clean Installation**: Professional appearance when mounted\r\n- **Easy Assembly**: Simple press-fit installation\r\n\r\n## Usage\r\n\r\n1. Measure your switch diameter and set the parameter\r\n2. Measure your panel thickness for proper fit\r\n3. Enable mounting tabs if extra security is needed\r\n4. Print and test fit before final installation\r\n5. Install switch through holder for clean panel appearance\r\n\r\n## Printing Guide\r\n\r\n- **Orientation**: Print with base down on build plate\r\n- **Supports**: None required\r\n- **Layer Height**: 0.2mm for smooth switch fit\r\n- **Infill**: 25-30% for mounting strength\r\n- **Material**: PLA for indoor use, ABS/PETG for durability\r\n\r\n## Applications\r\n\r\n- Control panels for electronic projects\r\n- Arduino/Raspberry Pi project enclosures\r\n- DIY electronics housings\r\n- Professional equipment panels\r\n- Prototype control interfaces",
      "template": "// ============================================================================\r\n// Switch Holder\r\n// Purpose: Panel-mount switch housing for electronic projects\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nswitch_diameter = 16;       // switch shaft diameter (mm)\r\npanel_thickness = 3;        // panel thickness to mount in (mm)\r\nholder_height = 20;         // total holder height (mm)\r\nwall_thickness = 2;         // wall thickness (mm)\r\nmounting_tabs = true;       // include mounting tabs\r\ntab_width = 8;              // mounting tab width (mm)\r\ntab_thickness = 2;          // mounting tab thickness (mm)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(switch_diameter > 0, \"Switch diameter must be > 0\");\r\nassert(panel_thickness > 0, \"Panel thickness must be > 0\");\r\nassert(wall_thickness >= 1, \"Wall thickness should be ≥ 1mm\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nouter_diameter = switch_diameter + 2*wall_thickness;\r\ntotal_height = holder_height;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\nmodule switch_holder() {\r\n    difference() {\r\n        // Main body\r\n        cylinder(d=outer_diameter, h=total_height, $fn=64);\r\n        \r\n        // Switch hole\r\n        translate([0, 0, -0.5]) {\r\n            cylinder(d=switch_diameter, h=total_height + 1, $fn=64);\r\n        }\r\n        \r\n        // Panel cutout\r\n        translate([0, 0, total_height - panel_thickness]) {\r\n            cylinder(d=outer_diameter + 2, h=panel_thickness + 1, $fn=64);\r\n        }\r\n    }\r\n    \r\n    // Mounting tabs\r\n    if (mounting_tabs) {\r\n        for (angle = [0, 120, 240]) {\r\n            rotate([0, 0, angle]) {\r\n                translate([outer_diameter/2, 0, total_height - panel_thickness - tab_thickness]) {\r\n                    cube([tab_width, tab_width, tab_thickness], center=true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\nswitch_holder();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Base down on build plate\r\n// Supports: None needed for this design\r\n// Layer height: 0.2mm for smooth fit\r\n// Infill: 25-30% for mounting strength\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit switch before final assembly",
      "files": {
        "metadata": "objects/switch-holder/metadata.json",
        "readme": "objects/switch-holder/README.md",
        "template": "objects/switch-holder/template.scad"
      }
    },
    {
      "id": "tool-holder",
      "name": "tool-holder",
      "description": "Multi-section tool organizer with magnetic base, labels, and specialized slots for screwdrivers, hex keys, and drill bits",
      "category": "workshop",
      "tags": [
        "workshop",
        "tools",
        "organizer",
        "magnetic",
        "screwdriver",
        "hex key",
        "drill bits",
        "professional",
        "labeled"
      ],
      "difficulty": "Intermediate",
      "estimated_time": "30-60 minutes",
      "readme": "# Tool Holder\r\n\r\nA workshop organizer with cylindrical tool slots.\r\n\r\n**Parametric features:**\r\n\r\n- Variable number of tool slots\r\n- Adjustable tool diameter\r\n- Customizable holder dimensions\r\n- Automatic spacing calculation\r\n\r\n**Usage:**\r\n\r\n1. Count your tools and measure their diameters\r\n2. Set holder dimensions for your workspace\r\n3. Print front-face down (holes sideways)\r\n4. Test tool fit, drill holes if needed for perfect fit",
      "template": "// ============================================================================\r\n// Professional Workshop Tool Organizer with Magnetic Base\r\n// Purpose: Multi-size tool organization with labels and magnetic mounting\r\n// Units: millimetres (mm)\r\n// ============================================================================\r\n\r\n/* ----------------------------- USER PARAMETERS -------------------------------- */\r\nscrewdriver_count = 6;    // number of screwdriver slots\r\nhex_key_count = 8;        // number of hex key slots\r\ndrill_bit_count = 12;     // number of drill bit slots\r\nholder_width = 200;       // holder width (mm)\r\nholder_depth = 80;        // holder depth (mm)\r\nholder_height = 50;       // holder height (mm)\r\nmagnetic_base = true;     // include neodymium magnet slots\r\ntool_labels = true;       // include tool size labels\r\nangle_cut = 15;           // front angle for better access (degrees)\r\n\r\n/* ------------------------- Assertions & Limits ---------------------------- */\r\nassert(screwdriver_count >= 1 && screwdriver_count <= 12, \"Screwdriver count 1-12\");\r\nassert(hex_key_count >= 1 && hex_key_count <= 15, \"Hex key count 1-15\");\r\nassert(drill_bit_count >= 1 && drill_bit_count <= 20, \"Drill bit count 1-20\");\r\nassert(angle_cut >= 0 && angle_cut <= 30, \"Angle cut should be 0-30 degrees\");\r\n\r\n/* ------------------------- Derived Measurements --------------------------- */\r\nwall_thickness = 3;\r\nsection_width = holder_width / 3;  // Three sections: screwdrivers, hex keys, drill bits\r\nmagnet_diameter = 12;              // Standard 12mm neodymium magnets\r\nmagnet_thickness = 3;\r\n\r\n/* ------------------------------ Modules ---------------------------------- */\r\n\r\nmodule base_body() {\r\n    difference() {\r\n        // Main body with angled front\r\n        hull() {\r\n            cube([holder_width, holder_depth, holder_height]);\r\n            translate([0, holder_depth - tan(angle_cut) * holder_height, 0])\r\n                cube([holder_width, 1, holder_height]);\r\n        }\r\n        \r\n        // Magnetic slots in base\r\n        if (magnetic_base) {\r\n            for(x = [20:40:holder_width-20]) {\r\n                for(y = [15, holder_depth-15]) {\r\n                    translate([x, y, -1])\r\n                        cylinder(d=magnet_diameter, h=magnet_thickness+1, $fn=24);\r\n                }\r\n            }\r\n        }\r\n        \r\n        // Cable management slot\r\n        translate([holder_width-15, 0, holder_height-10])\r\n            cube([10, holder_depth/3, 15]);\r\n    }\r\n    \r\n    // Section dividers\r\n    translate([section_width, 0, 0])\r\n        cube([2, holder_depth, holder_height]);\r\n    translate([2*section_width, 0, 0])\r\n        cube([2, holder_depth, holder_height]);\r\n}\r\n\r\nmodule screwdriver_section() {\r\n    // Different sized slots for various screwdriver types\r\n    sizes = [8, 6, 4, 8, 6, 4];  // Alternating large/small\r\n    spacing = (section_width - 20) / screwdriver_count;\r\n    \r\n    for(i = [0:screwdriver_count-1]) {\r\n        if(i < len(sizes)) {\r\n            x_pos = 10 + i * spacing;\r\n            tool_diameter = sizes[i];\r\n            \r\n            translate([x_pos, holder_depth/2, holder_height])\r\n                cylinder(d=tool_diameter, h=holder_height + 5, $fn=16);\r\n            \r\n            // Size labels\r\n            if (tool_labels) {\r\n                label_size = (tool_diameter >= 6) ? \"L\" : \"S\";\r\n                translate([x_pos, holder_depth-8, holder_height-2])\r\n                    linear_extrude(1)\r\n                        text(label_size, size=4, halign=\"center\", font=\"Arial:style=Bold\");\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule hex_key_section() {\r\n    // Graduated slots for hex keys (1.5mm to 10mm)\r\n    spacing = (section_width - 20) / hex_key_count;\r\n    \r\n    for(i = [0:hex_key_count-1]) {\r\n        x_pos = section_width + 10 + i * spacing;\r\n        tool_diameter = 2 + (i * 0.7);  // Graduating sizes\r\n        \r\n        translate([x_pos, holder_depth * 0.7, holder_height])\r\n            cylinder(d=tool_diameter, h=holder_height + 5, $fn=12);\r\n        \r\n        // Hex size labels\r\n        if (tool_labels) {\r\n            size_mm = round((1.5 + i * 0.6) * 10) / 10;\r\n            translate([x_pos, holder_depth-5, holder_height-2])\r\n                linear_extrude(1)\r\n                    text(str(size_mm), size=3, halign=\"center\", font=\"Arial\");\r\n        }\r\n    }\r\n    \r\n    // Hex key holder clip\r\n    translate([section_width + 5, holder_depth * 0.8, holder_height-5])\r\n        difference() {\r\n            cube([section_width-10, 8, 5]);\r\n            translate([2, 2, -1])\r\n                cube([section_width-14, 4, 7]);\r\n        }\r\n}\r\n\r\nmodule drill_bit_section() {\r\n    // Small holes for drill bits in a grid pattern\r\n    bit_spacing = (section_width - 20) / 4;\r\n    rows = 3;\r\n    \r\n    for(row = [0:rows-1]) {\r\n        for(col = [0:3]) {\r\n            if(row * 4 + col < drill_bit_count) {\r\n                x_pos = 2*section_width + 10 + col * bit_spacing;\r\n                y_pos = 15 + row * 15;\r\n                \r\n                translate([x_pos, y_pos, holder_height])\r\n                    cylinder(d=3.2, h=holder_height + 5, $fn=12);\r\n                \r\n                // Bit size labels\r\n                if (tool_labels) {\r\n                    bit_size = 1 + (row * 4 + col) * 0.5;\r\n                    translate([x_pos, y_pos-8, holder_height-2])\r\n                        linear_extrude(1)\r\n                            text(str(bit_size), size=2.5, halign=\"center\", font=\"Arial\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule corner_feet() {\r\n    // Rubber feet positions\r\n    feet_positions = [[5, 5], [holder_width-5, 5], [5, holder_depth-5], [holder_width-5, holder_depth-5]];\r\n    \r\n    for(pos = feet_positions) {\r\n        translate([pos[0], pos[1], -2])\r\n            cylinder(d=8, h=2, $fn=16);\r\n    }\r\n}\r\n\r\nmodule complete_tool_holder() {\r\n    difference() {\r\n        base_body();\r\n        \r\n        // Tool slots\r\n        screwdriver_section();\r\n        hex_key_section();\r\n        drill_bit_section();\r\n    }\r\n    \r\n    // Add corner feet\r\n    corner_feet();\r\n    \r\n    // Brand label\r\n    translate([holder_width/2, 5, holder_height-1])\r\n        linear_extrude(1)\r\n            text(\"FLEXICAD TOOLS\", size=6, halign=\"center\", font=\"Arial:style=Bold\");\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ncomplete_tool_holder();\r\n\r\n/* ============================== PRINT SETTINGS ============================== */\r\n// Print orientation: Base down (as oriented)\r\n// Layer height: 0.2mm\r\n// Infill: 20%\r\n// Supports: None needed\r\n// Material: PETG for durability\r\n// Post-processing: Insert 12mm x 3mm neodymium magnets in base slots\r\n\r\n    // Vertical holes for tools\r\n    for (i = [0:tool_count-1]) {\r\n      translate([slots_start_x + i * slot_pitch, holder_depth/2, holder_height])\r\n        rotate([90,0,0])\r\n        cylinder(d=tool_diameter + clearance, h=holder_depth + 1, $fn=64);\r\n    }\r\n  }\r\n}\r\n\r\n/* --------------------------------- Call ---------------------------------- */\r\ntool_holder();\r\n\r\n/* ============================== HOW TO PRINT / ORIENT ============================== */\r\n// Print orientation: Front face down on build plate (holes facing sideways)\r\n// Supports: None needed in this orientation\r\n// Layer height: 0.2-0.3mm\r\n// Infill: 20-25% for workshop durability\r\n// Print speed: Normal (50mm/s)\r\n// Post-processing: Test fit tools, may need light drilling for perfect fit",
      "files": {
        "metadata": "objects/tool-holder/metadata.json",
        "readme": "objects/tool-holder/README.md",
        "template": "objects/tool-holder/template.scad"
      }
    }
  ]
}