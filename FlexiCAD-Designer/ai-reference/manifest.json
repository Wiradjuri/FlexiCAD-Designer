{
  "version": 1,
  "generated_at": "2025-09-26T22:25:12.335Z",
  "count": 53,
  "total_bytes": 78593,
  "items": [
    {
      "path": "Advanced\\animation.scad",
      "ext": ".scad",
      "bytes": 3250,
      "sha256": "e54588881a8d947ffcc941fcd1a57a99779e145688cf80172a2bc11b38060c8b",
      "content": "// animation.scad - Demo of animation usage\n\n// The animation functionality is based simply on a variable $t\n// that is changed automatically by OpenSCAD while repeatedly\n// showing the model.\n// To activate animation, select \"View->Animate\" from the\n// menu; this will cause three fields to appear\n// underneath the Preview console: Time, FPS & Steps.\n// To commence animation, enter values into the FPS and Steps input\n// fields (e.g. 5 FPS and 200 Steps for this animation).\n// This is not intended to directly produce real-time animations\n// but the image sequence can be exported to generate videos of\n// the animation.\n\n// Length of the 2 arm segments, change to see the effects on\n// the arm movements.\n\n//length of the red arm\narm1_length = 70;\n//length of the green arm\narm2_length = 50;\n\nr = 2;\n$fn = 30;\n\nplate();\npos = position($t);\narm(pos[0], pos[1], arm1_length, arm2_length);\n\n// Function describing the X/Y position that should be traced\n// by the arm over time.\n// The $t variable will be used as parameter for this function\n// so the range for t is [0..1].\nfunction position(t) = t < 0.5\n    ? [ 200 * t - 50, 30 * sin(5 * 360 * t) + 60 ]\n    : [ 50 * cos(360 * (t - 0.5)), 100 * -sin(360 * (t- 0.5)) + 60 ];\n\n// Inverse kinematics functions for a scara style arm\n// See http://forums.reprap.org/read.php?185,283327\nfunction sq(x, y) = x * x + y * y;\nfunction angB(x, y, l1, l2) = 180 - acos((l2 * l2 + l1 * l1 - sq(x, y)) / (2 * l1 * l2));\nfunction ang2(x, y, l1, l2) = 90 - acos((l2 * l2 - l1 * l1 + sq(x, y)) / (2 * l2 * sqrt(sq(x, y)))) - atan2(x, y);\nfunction ang1(x, y, l1, l2) = ang2(x, y, l1, l2) + angB(x, y, l1, l2);\n\n// Draw an arm segment with the given color and length.\nmodule segment(col, l) {\n    color(col) {\n        hull() {\n            sphere(r);\n            translate([l, 0, 0]) sphere(r);\n        }\n    }\n}\n\n// Draw the whole 2 segmented arm trying to reach position x/y.\n// Parameters l1 and l2 are the length of the two arm segments.\nmodule arm(x, y, l1, l2) {\n    a1 = ang1(x, y, l1, l2);\n    a2 = ang2(x, y, l1, l2);\n    sphere(r = 2 * r);\n    cylinder(r = 2, h = 6 * r, center = true);\n    rotate([0, 0, a1]) segment(\"red\", l1);\n    translate(l1 * [cos(a1), sin(a1), 0]) {\n        sphere(r = 2 * r);\n        rotate([0, 0, a2]) segment(\"green\", l2);\n    }\n    translate([x, y, -r/2])\n        cylinder(r1 = 0, r2 = r, h = 4 * r, center = true);\n}\n\nmodule curve() polygon([for (a = [ 0 : 0.004 : 1]) position(a)]);\n\n// Draws the plate and the traced function using small black cubes.\nmodule plate() {\n    %translate([0, 0, -3*r]) {\n        translate([0,25,0]) cube([150, 150, 0.1], center = true);\n        color(\"Black\") linear_extrude(0.1) difference() {\n            curve();\n            offset(-1) curve();\n        }\n    }\n}\n\necho(version=version());\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\assert.scad",
      "ext": ".scad",
      "bytes": 1117,
      "sha256": "6d7115e91eef737dcc1df068f6cbf35e20a716bdfe9cae1f64605f859935ce3c",
      "content": "echo(version=version());\n\nfunction size(x) = assert(x % 2 == 0, \"Size must be an even number\") x;\n\nmodule ring(r = 10, cnt = 3, s = 6) {\n    assert(r >= 10, \"Parameter r must be >= 10\");\n    assert(cnt >= 3 && cnt <= 20, \"Parameter cnt must be between 3 and 20 (inclusive\");\n    for (a = [0 : cnt - 1]) {\n        rotate(a * 360 / cnt) translate([r, 0, 0]) cube(size(s), center = true);\n    }\n}\n\n// ring(5, 5, 4); // trigger assertion for parameter r\n\n// ring(10, 2, 4); // trigger assertion for parameter cnt\n\n// ring(10, 3, 5); // trigger assertion in function size()\n\ncolor(\"red\") ring(10, 3, 4);\ncolor(\"green\") ring(25, 9, 6);\ncolor(\"blue\") ring(40, 20, 8);\n\n// Written in 2018 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\children_indexed.scad",
      "ext": ".scad",
      "bytes": 1887,
      "sha256": "72d15dce7505bd91abe29c7ab09b71c60e2077fe9c2c6e7d57c52832bc353871",
      "content": "// children_indexed.scad - Usage of indexed children()\n\n// children() with a parameter allows access to a specific child\n// object with children(0) being the first one. In addition the\n// $children variable is automatically set to the number of child\n// objects.\n\ncolor(\"red\")\n    translate([-100, -20, 0])\n        align_in_grid_and_add_text();\n\ncolor(\"yellow\")\n    translate([-50, -20, 0])\n        align_in_grid_and_add_text() {\n            cube(5, center = true);\n        }\n\ncolor(\"cyan\")\n    translate([0, -20, 0])\n        align_in_grid_and_add_text() {\n            cube(5, center = true);\n            sphere(4);\n        }\n\ncolor(\"green\")\n    translate([50, -20, 0])\n        align_in_grid_and_add_text() {\n            cube(5, center = true);\n            sphere(4);\n            cylinder(r = 4, h = 5);\n        }\n\n\nmodule align_in_grid_and_add_text()\n{\n    if ($children == 0) {\n        linear_extrude(height = 1, center = true)\n          text(\"Nothing...\", 6, halign = \"center\");\n    } else {\n        t = $children == 1 ? \"one object\" : str($children, \" objects \");\n        linear_extrude(height = 1, center = true)\n          text(t, 6, halign = \"center\");\n\n        for (y = [0 : $children - 1])\n            for (x = [0 : $children - 1])\n                translate([15 * (x - ($children - 1) / 2), 20 * y + 40, 0])\n                    scale(1 + x / $children)\n                        children(y);\n    }\n}\n\necho(version=version());\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\children.scad",
      "ext": ".scad",
      "bytes": 1541,
      "sha256": "5494e8af0eb3a87579194733b09c655b2f1f68ed98645987b652b0726928f209",
      "content": "// children.scad - Usage of children()\n\n// The use of children() allows to write generic modules that\n// modify child modules regardless of how the child geometry\n// is created.\n\ncolor(\"red\")\n    make_ring_of(radius = 15, count = 6)\n        cube(8, center = true);\n\ncolor(\"green\")\n    make_ring_of(radius = 30, count = 12)\n        difference() {\n            sphere(5);\n            cylinder(r = 2, h = 12, center = true);\n        }\n\ncolor(\"cyan\")\n    make_ring_of(radius = 50, count = 4)\n        something();\n\nmodule make_ring_of(radius, count)\n{\n    for (a = [0 : count - 1]) {\n        angle = a * 360 / count;\n        translate(radius * [sin(angle), -cos(angle), 0])\n            rotate([0, 0, angle])\n                children();\n    }\n}\n\nmodule something()\n{\n    cube(10, center = true);\n    cylinder(r = 2, h = 12, $fn = 40);\n    translate([0, 0, 12])\n        rotate([90, 0, 0])\n            linear_extrude(height = 2, center = true)\n                text(\"SCAD\", 8, halign = \"center\");\n    translate([0, 0, 12])\n        cube([22, 1.6, 0.4], center = true);\n}\n\necho(version=version());\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\GEB.scad",
      "ext": ".scad",
      "bytes": 1801,
      "sha256": "6246d70abb2a57d83e9fd7dcd30456a94b94ad990bd212290008a7f748c65e43",
      "content": "font = \"Liberation Sans\";\n// Nicer, but not generally installed:\n// font = \"Bank Gothic\";\n\nmodule G() offset(0.3) text(\"G\", size=10, halign=\"center\", valign=\"center\", font = font);\nmodule E() offset(0.3) text(\"E\", size=10, halign=\"center\", valign=\"center\", font = font);\nmodule B() offset(0.5) text(\"B\", size=10, halign=\"center\", valign=\"center\", font = font);\n\n$fn=64;\n\nmodule GEB() {\nintersection() {\n    linear_extrude(height = 20, convexity = 3, center=true) B();\n    \n    rotate([90, 0, 0])\n      linear_extrude(height = 20, convexity = 3, center=true) E();\n    \n    rotate([90, 0, 90])\n      linear_extrude(height = 20, convexity = 3, center=true) G();\n  }\n}\n\ncolor(\"Ivory\") GEB();\n\ncolor(\"MediumOrchid\") \n  translate([0,0,-20])\n    linear_extrude(1) \n      difference() {\n        square(40, center=true);\n        projection() GEB();\n      }\n\ncolor(\"DarkMagenta\")\n  rotate([90,0,0]) \n    translate([0,0,-20])\n      linear_extrude(1) \n        difference() {\n          translate([0,0.5]) square([40,39], center=true);\n          projection() rotate([-90,0,0]) GEB();\n        }\n\ncolor(\"MediumSlateBlue\")\n  rotate([90,0,90]) \n    translate([0,0,-20])\n      linear_extrude(1)\n        difference() {\n          translate([-0.5,0.5]) square([39,39], center=true);\n          projection() rotate([0,-90,-90]) GEB();\n        }\n\necho(version=version());\n// Written in 2015 by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\module_recursion.scad",
      "ext": ".scad",
      "bytes": 2137,
      "sha256": "d30dd36c65bb2efa2761664813066979779e4cb14ac1172af908eff2529bbba3",
      "content": "// Recursive calls of modules can generate complex geometry, especially\n// fractal style objects.\n// The example uses a recursive module to generate a random tree as\n// described in http://natureofcode.com/book/chapter-8-fractals/\n\n// number of levels for the recursion\nlevels = 10; // [1:1:14]\n// length of the first segment\nlen = 100; // [10:10:200]\n// thickness of the first segment\nthickness = 5; //[1:1:20]\n\n// the identity matrix\nidentity = [ [ 1, 0, 0, 0 ], [ 0, 1, 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];\n\n// random generator, to generate always the same output for the example,\n// this uses a seed for rands() and stores the array of random values in\n// the random variable. To generate different output, remove the seed or\n// replace the function rnd() to just call rands(s, e, 1)[0].\nrcnt = 1000;\nrandom = rands(0, 1, rcnt, 18);\nfunction rnd(s, e, r) = random[r % rcnt] * (e - s) + s;\n\n// generate 4x4 translation matrix\nfunction mt(x, y) = [ [ 1, 0, 0, x ], [ 0, 1, 0, y ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];\n\n// generate 4x4 rotation matrix around Z axis\nfunction mr(a) = [ [ cos(a), -sin(a), 0, 0 ], [ sin(a), cos(a), 0, 0 ], [ 0, 0, 1, 0 ], [ 0, 0, 0, 1 ] ];\n\nmodule tree(length, thickness, count, m = identity, r = 1) {\n    color([0, 1 - (0.8 / levels * count), 0])\n        multmatrix(m)\n            square([thickness, length]);\n\n    if (count > 0) {\n        tree(rnd(0.6, 0.8, r) * length, 0.8 * thickness, count - 1, m * mt(0, length) * mr(rnd(20, 35, r + 1)), 8 * r);\n        tree(rnd(0.6, 0.8, r + 1) * length, 0.8 * thickness, count - 1, m * mt(0, length) * mr(-rnd(20, 35, r + 3)), 8 * r + 4);\n    }\n}\n\ntree(len, thickness, levels);\n\necho(version=version());\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\offset.scad",
      "ext": ".scad",
      "bytes": 1044,
      "sha256": "c34c5205c748154d7355d5afe4b2677f4bc2a122c00c44f6d8629988e806c384",
      "content": "// offset.scad - Example for offset() usage in OpenSCAD\n\n$fn = 40;\n\nfoot_height = 20;\n\necho(version=version());\n\nmodule outline(wall = 1) {\n  difference() {\n    offset(wall / 2) children();\n    offset(-wall / 2) children();\n  }\n}\n\n// offsetting with a positive value allows to create rounded corners easily\nlinear_extrude(height = foot_height, scale = 0.5) {\n  offset(10) {\n    square(50, center = true);\n  }\n}\n\ntranslate([0, 0, foot_height]) {\n  linear_extrude(height = 20) {\n    outline(wall = 2) circle(15);\n  }\n}\n\n%cylinder(r = 14, h = 100);\n%translate([0, 0, 100]) sphere(r = 30);\n\n\n\n// Written in 2014 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Advanced\\surface_image.scad",
      "ext": ".scad",
      "bytes": 944,
      "sha256": "036b9b10b5e84059ec946d3107dc96b629d1cc61418c86c1aa3759e382e8daa1",
      "content": "echo(version=version());\n\n// surface() can import images, the pixel values are converted\n// to grayscale and converted to values between 0 and 100.\n// The example takes 3 cuts from the height map and displays\n// those as 3 stacked layers.\n\nfor (a = [1, 2, 3])\n    color([a/6 + 0.5, 0, 0])\n       linear_extrude(height = 2 * a, convexity = 10)\n            projection(cut = true)\n                translate([0, 0, -30 * a])\n                    surface(\"surface_image.png\", center = true);\n\n\n\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\CSG-modules.scad",
      "ext": ".scad",
      "bytes": 2498,
      "sha256": "4356b7495104ddde40203f5dd5c92465fb50e0228b49bbf9f77ac04ba3c8e0b0",
      "content": "// CSG-modules.scad - Basic usage of modules, if, color, $fs/$fa\n\n// Change this to false to remove the helper geometry\ndebug = true;\n\n// Global resolution\n$fs = 0.1;  // Don't generate smaller facets than 0.1 mm\n$fa = 5;    // Don't generate larger angles than 5 degrees\n\n// Main geometry\ndifference() {\n    intersection() {\n        body();\n        intersector();\n    }\n    holes();\n}\n\n// Helpers\nif (debug) helpers();\n\n// Core geometric primitives.\n// These can be modified to create variations of the final object\n\nmodule body() {\n    color(\"Blue\") sphere(10);\n}\n\nmodule intersector() {\n    color(\"Red\") cube(15, center=true);\n}\n\nmodule holeObject() {\n    color(\"Lime\") cylinder(h=20, r=5, center=true);\n}\n\n// Various modules for visualizing intermediate components\n\nmodule intersected() {\n    intersection() {\n        body();\n        intersector();\n    }\n}\n\nmodule holeA() rotate([0,90,0]) holeObject();\nmodule holeB() rotate([90,0,0]) holeObject();\nmodule holeC() holeObject();\n\nmodule holes() {\n    union() {\n        holeA();\n        holeB();\n        holeC();\n    }\n}\n\nmodule helpers() {\n    // Inner module since it's only needed inside helpers\n    module line() color(\"Black\") cylinder(r=1, h=10, center=true);\n\n    scale(0.5) {\n        translate([-30,0,-40]) {\n            intersected();\n            translate([-15,0,-35]) body();\n            translate([15,0,-35]) intersector();\n            translate([-7.5,0,-17.5]) rotate([0,30,0]) line();\n            translate([7.5,0,-17.5]) rotate([0,-30,0]) line();\n        }\n        translate([30,0,-40]) {\n            holes();\n            translate([-10,0,-35]) holeA();\n            translate([10,0,-35]) holeB();\n            translate([30,0,-35]) holeC();\n            translate([5,0,-17.5]) rotate([0,-20,0]) line();\n            translate([-5,0,-17.5]) rotate([0,30,0]) line();\n            translate([15,0,-17.5]) rotate([0,-45,0]) line();\n        }\n        translate([-20,0,-22.5]) rotate([0,45,0]) line();\n        translate([20,0,-22.5]) rotate([0,-45,0]) line();\n    }\n}\n\necho(version=version());\n// Written by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\CSG.scad",
      "ext": ".scad",
      "bytes": 774,
      "sha256": "d532bb4ba8c8c926ca4a34b75d404ec0c1676e5ea16d271223edf68c4f15891b",
      "content": "// CSG.scad - Basic example of CSG usage\n\ntranslate([-24,0,0]) {\n    union() {\n        cube(15, center=true);\n        sphere(10);\n    }\n}\n\nintersection() {\n    cube(15, center=true);\n    sphere(10);\n}\n\ntranslate([24,0,0]) {\n    difference() {\n        cube(15, center=true);\n        sphere(10);\n    }\n}\n\necho(version=version());\n// Written by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\LetterBlock.scad",
      "ext": ".scad",
      "bytes": 1202,
      "sha256": "582b243beb126f79f4deb83cc81cde2bb644e9f02d93145564a2042c715f773c",
      "content": "// LetterBlock.scad - Basic usage of text() and linear_extrude()\n\n// Module instantiation\nLetterBlock(\"M\");\n\n// Module definition.\n// size=30 defines an optional parameter with a default value.\nmodule LetterBlock(letter, size=30) {\n    difference() {\n        translate([0,0,size/4]) cube([size,size,size/2], center=true);\n        translate([0,0,size/6]) {\n            // convexity is needed for correct preview\n            // since characters can be highly concave\n            linear_extrude(height=size, convexity=4)\n                text(letter, \n                     size=size*22/30,\n                     font=\"Bitstream Vera Sans\",\n                     halign=\"center\",\n                     valign=\"center\");\n        }\n    }\n}\n\necho(version=version());\n// Written by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\linear_extrude.scad",
      "ext": ".scad",
      "bytes": 1274,
      "sha256": "b73d19d9641172b2c4bda8143308d921fe1dda9a4ae340ed32bbec7d9d544bb2",
      "content": "echo(version=version());\n\n// simple 2D -> 3D extrusion of a rectangle\ncolor(\"red\")\n    translate([0, -30, 0])\n        linear_extrude(height = 20)\n            square([20, 10], center = true);\n\n// using the scale parameter a frustum can be constructed\ncolor(\"green\")\n    translate([-30, 0, 0])\n        linear_extrude(height = 20, scale = 0.2)\n            square([20, 10], center = true);\n\n// with twist the extruded shape will rotate around the Z axis\ncolor(\"cyan\")\n    translate([30, 0, 0])\n        linear_extrude(height = 20, twist = 90)\n            square([20, 10], center = true);\n\n// combining both relatively complex shapes can be created\ncolor(\"gray\")\n    translate([0, 30, 0])\n        linear_extrude(height = 40, twist = -360, scale = 0, center = true, slices = 200)\n            square([20, 10], center = true);\n\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\logo_and_text.scad",
      "ext": ".scad",
      "bytes": 1553,
      "sha256": "db95e82a7a0c198d94f732fe1c7370976aca8353ee379275fadb05d46bf6a8b0",
      "content": "// logo_and_text.scad - Example for use<> and text()\n\nuse <logo.scad> // Imports the Logo() module from logo.scad into this namespace\n\n// Set the initial viewport parameters\n$vpr = [90, 0, 0];\n$vpt = [300, 0, 80];\n$vpd = 1600;\n\nlogosize = 120;\n\ntranslate([110, 0, 80]) {\n  translate([0, 0, 30]) rotate([25, 25, -40]) Logo(logosize);\n  translate([100, 0, 40])  green() t(\"Open\", s = 42, spacing = 1.05);\n  translate([247, 0, 40])  corn()  t(\"SCAD\" , s = 42, spacing = 0.9);\n  translate([100, 0, 0])   black() t(\"The Programmers\");\n  translate([160, 0, -30]) black() t(\"Solid 3D CAD Modeller\");\n}\n\n// Helper to create 3D text with correct font and orientation\nmodule t(t, s = 18, style = \":style=Bold\", spacing = 1) {\n  rotate([90, 0, 0])\n    linear_extrude(height = 1)\n      text(t, size = s,\n           spacing=spacing,\n           font = str(\"Liberation Sans\", style),\n           $fn = 16);\n}\n\n// Color helpers\nmodule green() color([157/255,203/255,81/255]) children();\nmodule corn() color([249/255,210/255,44/255]) children();\nmodule black() color([0, 0, 0]) children();\n\necho(version=version());\n// Written in 2014 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\logo.scad",
      "ext": ".scad",
      "bytes": 1244,
      "sha256": "707de795bec4510c2e0a755795d2ea40079d964d550743492fcce610edcde6da",
      "content": "// logo.scad - Basic example of module, top-level variable and $fn usage\n\nLogo(50);\n\n// The $fn parameter will influence all objects inside this module\n// It can, optionally, be overridden when instantiating the module\nmodule Logo(size=50, $fn=100) {\n    // Temporary variables\n    hole = size/2;\n    cylinderHeight = size * 1.25;\n\n    // One positive object (sphere) and three negative objects (cylinders)\n    difference() {\n        sphere(d=size);\n        \n        cylinder(d=hole, h=cylinderHeight, center=true);\n        // The '#' operator highlights the object\n        #rotate([90, 0, 0]) cylinder(d=hole, h=cylinderHeight, center=true);\n        rotate([0, 90, 0]) cylinder(d=hole, h=cylinderHeight, center=true);\n    }\n}\n\necho(version=version());\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n"
    },
    {
      "path": "Basics\\projection.scad",
      "ext": ".scad",
      "bytes": 2012,
      "sha256": "340bd2ae699b403d1e84a3d0a6815ba72ab1fd132c1db0cc9260c098c37c0826",
      "content": "echo(version=version());\n\n%import(\"projection.stl\");\n\n// projection() without the cut = true parameter will project\n// the outline of the object onto the X/Y plane. The result is\n// a 2D shape.\n\ncolor(\"red\")\n    translate([0, 0, -20])\n        linear_extrude(height = 2, center = true)\n            difference() {\n                square(30, center = true);\n                projection()\n                    import(\"projection.stl\");\n            }\n\ncolor(\"green\")\n    rotate([0, 90, 0])\n        translate([0, 0, -20])\n            linear_extrude(height = 2, center = true)\n                difference() {\n                    square(30, center = true);\n                    projection()\n                        rotate([0, 90, 0])\n                            import(\"projection.stl\");\n                }\n\ncolor(\"cyan\")\n    rotate([-90, 0, 0])\n        translate([0, 0, 20])\n            linear_extrude(height = 2, center = true)\n                difference() {\n                    square(30, center = true);\n                    projection()\n                        rotate([90, 0, 0])\n                            import(\"projection.stl\");\n                }\n\n// Including the cut = true uses the outline of the cut at\n// the X/Y plane.at Z = 0. This can make internal features\n// of the model visible.\n\ncolor(\"yellow\", 0.5)\n    translate([0, 0, 20])\n        linear_extrude(height = 2, center = true)\n            difference() {\n                square(30, center = true);\n                projection(cut = true)\n                    import(\"projection.stl\");\n            }\n\n\n\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\rotate_extrude.scad",
      "ext": ".scad",
      "bytes": 1820,
      "sha256": "18a6f1ad8ddde04859f14ef33f3ee8a809cc042e62bccd32ba0be450cc0bbd63",
      "content": "echo(version=version());\n\n// rotate_extrude() rotates a 2D shape around the Z axis. \n// Note that the 2D shape must be either completely on the \n// positive or negative side of the X axis.\ncolor(\"red\")\n    rotate_extrude()\n        translate([10, 0])\n            square(5);\n\n// rotate_extrude() uses the global $fn/$fa/$fs settings, but\n// it's possible to give a different value as parameter.\ncolor(\"cyan\")\n    translate([40, 0, 0])\n        rotate_extrude($fn = 80)\n            text(\"  J\");\n\n// Using a shape that touches the X axis is allowed and produces\n// 3D objects that don't have a hole in the center.\ncolor(\"green\")\n    translate([0, 30, 0])\n        rotate_extrude($fn = 80)\n            polygon( points=[[0,0],[8,4],[4,8],[4,12],[12,16],[0,20]] );\n\n\n// By default rotate_extrude forms a full 360 degree circle, \n// but a partial rotation can be performed by using the angle parameter.\n// Positive angles create an arc starting from the X axis, going counter-clockwise.\n// Negative angles generate an arc in the clockwise direction.\ncolor(\"magenta\") \n  translate([40,40]){\n    rotate_extrude(angle=180)\n      translate([12.5,0])\n        square(5);\n    translate([7.5,0])\n      rotate_extrude(angle=180)\n        translate([5,0])\n          square(5);\n    translate([-7.5,0])\n      rotate_extrude(angle=-180)\n        translate([5,0])\n          square(5);\n  }\n\n\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Basics\\text_on_cube.scad",
      "ext": ".scad",
      "bytes": 1735,
      "sha256": "8318d68293ea99aa55c2be551453bcef76c62f9e57b86eefc9a399bad7dcce29",
      "content": "// text_on_cube.scad - Example for text() usage in OpenSCAD\n\necho(version=version());\n\nfont = \"Liberation Sans\"; //[\"Liberation Sans\", \"Liberation Sans:style=Bold\", \"Liberation Sans:style=Italic\", \"Liberation Mono\", \"Liberation Serif\"]\n\ncube_size = 60;\nletter_size = 50;\nletter_height = 5;\n\no = cube_size / 2 - letter_height / 2;\n\nmodule letter(l) {\n  // Use linear_extrude() to make the letters 3D objects as they\n  // are only 2D shapes when only using text()\n  linear_extrude(height = letter_height) {\n    text(l, size = letter_size, font = font, halign = \"center\", valign = \"center\", $fn = 16);\n  }\n}\n\ndifference() {\n  union() {\n    color(\"gray\") cube(cube_size, center = true);\n    translate([0, -o, 0]) rotate([90, 0, 0]) letter(\"C\");\n    translate([o, 0, 0]) rotate([90, 0, 90]) letter(\"U\");\n    translate([0, o, 0]) rotate([90, 0, 180]) letter(\"B\");\n    translate([-o, 0, 0]) rotate([90, 0, -90]) letter(\"E\");\n  }\n\n  // Put some symbols on top and bottom using symbols from the\n  // Unicode symbols table.\n  // (see https://en.wikipedia.org/wiki/Miscellaneous_Symbols)\n  //\n  // Note that depending on the font used, not all the symbols\n  // are actually available.\n  translate([0, 0, o])  letter(\"\\u263A\");\n  translate([0, 0, -o - letter_height])  letter(\"\\u263C\");\n}\n\n\n\n// Written in 2014 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Functions\\echo.scad",
      "ext": ".scad",
      "bytes": 1723,
      "sha256": "1b603698f6c243adfc3ffc2de8645f0ec256a92e8ee883388451956a89177414",
      "content": "echo(version=version());\n\n// Using echo() in expression context can help with debugging\n// recursive functions. See console window for output of the\n// examples below.\n\n// Simple example just outputting the function input parameters.\nfunction f1(x, y) = echo(\"f1: \", x, y) 0.5 * x * x + 4 * y + 1;\n\nr1 = f1(3, 5);\n\n// To output the result, there are multiple possibilities, the\n// easiest is to use let() to assign the result to a variable\n// (y here) which is used for both echo() output and result.\nfunction f2(x) = let(y = pow(x, 3)) echo(\"f2: \", y) y;\n\nr2 = f2(4);\n\n// Another option is using a helper function where the argument\n// is evaluated first and then passed to the result() helper\n// where it's printed using echo() and returned as result.\nfunction result(x) = echo(\"f3: \", x) x;\nfunction f3(x) = result(x * x - 5);\n\nr3 = f3(5);\n\n// A more complex example is a recursive function. Combining\n// the two different ways of printing values before and after\n// evaluation it's possible to output the input value x when\n// descending into the recursion and the result y collected\n// when returning.\nfunction f4(x) = echo(\"f4: \", x = x)\n                 let(y = x == 1 ? 1 : x * f4(x - 1))\n                 echo(\"f4: \", y = y)\n                 y;\n\nr4 = f4(5);\n\n// Written in 2018 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Functions\\functions.scad",
      "ext": ".scad",
      "bytes": 1213,
      "sha256": "eeb513b72a01e4ea8ef4fe0a5e803ecdad5b4b904040d38ca18f27c06e5e3799",
      "content": "echo(version=version());\n\n// Functions can be defined to simplify code using lots of\n// calculations.\n\n// Simple example with a single function argument (which should\n// be a number) and returning a number calculated based on that.\nfunction f(x) = 0.5 * x + 1;\n\ncolor(\"red\")\n    for (a = [ -100 : 5 : 100 ])\n        translate([a, f(a), 0]) cube(2, center = true);\n\n// Functions can call other functions and return complex values\n// too. In this case a 3 element vector is returned which can\n// be used as point in 3D space or as vector (in the mathematical\n// meaning) for translations and other transformations.\nfunction g(x) = [ 5 * x + 20, f(x) * f(x) - 50, 0 ];\n\ncolor(\"green\")\n    for (a = [ -200 : 10 : 200 ])\n        translate(g(a / 8)) sphere(1);\n\n\n\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Functions\\list_comprehensions.scad",
      "ext": ".scad",
      "bytes": 1748,
      "sha256": "092e10e8850230f72252164d481e42ff32d4996703e13b72abafc62258aeb13a",
      "content": "// list_comprehensions.scad - Examples of list comprehension usage\n\n// Basic list comprehension:\n// Returns a 2D vertex per iteration of the for loop\n// Note: subsequent assignments inside the for loop is allowed\nmodule ngon(num, r) {\n  polygon([for (i=[0:num-1], a=i*360/num) [ r*cos(a), r*sin(a) ]]);\n}\n\nngon(3, 10);\ntranslate([20,0]) ngon(6, 8);\ntranslate([36,0]) ngon(10, 6);\n\n// More complex list comprehension:\n// Similar to ngon(), but uses an inner function to calculate\n// the vertices. the let() keyword allows assignment of temporary variables.\nmodule rounded_ngon(num, r, rounding = 0) {\n  function v(a) = let (d = 360/num, v = floor((a+d/2)/d)*d) (r-rounding) * [cos(v), sin(v)];\n  polygon([for (a=[0:360-1]) v(a) + rounding*[cos(a),sin(a)]]);\n}\n\ntranslate([0,22]) rounded_ngon(3, 10, 5);\ntranslate([20,22]) rounded_ngon(6, 8, 4);\ntranslate([36,22]) rounded_ngon(10, 6, 3);\n\n// Gear/star generator\n// Uses a list comprehension taking a list of radii to generate a star shape\nmodule star(num, radii) {\n  function r(a) = (floor(a / 10) % 2) ? 10 : 8;\n  polygon([for (i=[0:num-1], a=i*360/num, r=radii[i%len(radii)]) [ r*cos(a), r*sin(a) ]]);\n}\n\ntranslate([0,44]) star(20, [6,10]);\ntranslate([20,44]) star(40, [6,8,8,6]);\ntranslate([36,44]) star(30, [3,4,5,6,5,4]);\n\necho(version=version());\n// Written by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Functions\\polygon_areas.scad",
      "ext": ".scad",
      "bytes": 1755,
      "sha256": "b21c5963142a2a34d42a1de106af54c9748202377a0dabec70abf912ca2a152b",
      "content": "// polygon_areas.scad: Another recursion example \n\n// Draw all geometry\ntranslate([0,20]) color(\"Red\") text(\"Areas:\", size=8, halign=\"center\");\ntranslate([-44,0]) shapeWithArea(3, 10);\ntranslate([-22,0]) shapeWithArea(4, 10);\ntranslate([0,0]) shapeWithArea(6, 10);\ntranslate([22,0]) shapeWithArea(10, 10);\ntranslate([44,0]) shapeWithArea(360, 10);\n\n// One shape with corresponding text\nmodule shapeWithArea(num, r) {\n    polygon(ngon(num, r));\n    translate([0,-20]) \n        color(\"Cyan\") \n            text(str(round(area(ngon(num, r)))), halign=\"center\", size=8);\n}\n\n// Simple list comprehension for creating N-gon vertices\nfunction ngon(num, r) = \n  [for (i=[0:num-1], a=i*360/num) [ r*cos(a), r*sin(a) ]];\n\n// Area of a triangle with the 3rd vertex in the origin\nfunction triarea(v0, v1) = cross(v0, v1) / 2;\n\n// Area of a polygon using the Shoelace formula\nfunction area(vertices) =\n  let (areas = [let (num=len(vertices))\n                  for (i=[0:num-1]) \n                    triarea(vertices[i], vertices[(i+1)%num])\n               ])\n      sum(areas);\n\n// Recursive helper function: Sums all values in a list.\n// In this case, sum all partial areas into the final area.\nfunction sum(values,s=0) =\n  s == len(values) - 1 ? values[s] : values[s] + sum(values,s+1);\n\n\necho(version=version());\n// Written in 2015 by Marius Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Functions\\recursion.scad",
      "ext": ".scad",
      "bytes": 1131,
      "sha256": "5e5b377b83c7a01eeaccf738896291d9e921ccb3b6dbbd4bb8fbeb736a3cbbd9",
      "content": "// recursionscad:  Basic recursion example \n\n// Recursive functions are very powerful for calculating values.\n// A good number of algorithms make use of recursive definitions,\n// e.g the caluclation of the factorial of a number.\n// The ternary operator \" ? : \" is the easiest way to define the\n// termination condition.\n// Note how the following simple implementation will never terminate\n// when called with a negative value. This will produce an error after\n// some time when OpenSCAD detects the endless recursive call.\nfunction factorial(n) = n == 0 ? 1 : factorial(n - 1) * n;\n\ncolor(\"cyan\") text(str(\"6! = \", factorial(6)), halign = \"center\");\n\necho(version=version());\n// Written in 2015 by Torsten Paul <Torsten.Paul@gmx.de>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example001.scad",
      "ext": ".scad",
      "bytes": 934,
      "sha256": "796ca4442d80d14e2ee611dbfa8316772af6b77015e387bdf285829015b8cad5",
      "content": "module example001()\n{\n  function r_from_dia(d) = d / 2;\n\n  module rotcy(rot, r, h) {\n    rotate(90, rot)\n      cylinder(r = r, h = h, center = true);\n  }\n\n  difference() {\n    sphere(r = r_from_dia(size));\n    rotcy([0, 0, 0], cy_r, cy_h);\n    rotcy([1, 0, 0], cy_r, cy_h);\n    rotcy([0, 1, 0], cy_r, cy_h);\n  }\n\n  size = 50;\n  hole = 25;\n\n  cy_r = r_from_dia(hole);\n  cy_h = r_from_dia(size * 2.5);\n}\n\necho(version=version());\n\nexample001();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example002.scad",
      "ext": ".scad",
      "bytes": 982,
      "sha256": "f3cfddb57a395f53fe91d78f075b52739bf3240b4418f800dcc836ec2e1fcfb5",
      "content": "\nmodule example002()\n{\n  intersection() {\n    difference() {\n      union() {\n        cube([30, 30, 30], center = true);\n        translate([0, 0, -25])\n          cube([15, 15, 50], center = true);\n      }\n      union() {\n        cube([50, 10, 10], center = true);\n        cube([10, 50, 10], center = true);\n        cube([10, 10, 50], center = true);\n      }\n    }\n    translate([0, 0, 5])\n      cylinder(h = 50, r1 = 20, r2 = 5, center = true);\n  }\n}\n\necho(version=version());\n\nexample002();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example003.scad",
      "ext": ".scad",
      "bytes": 905,
      "sha256": "3022460bfe49d86000db50d6bcca407f4f798d8bb18bb62555680142c48fae2e",
      "content": "\nmodule example003()\n{\n  difference() {\n    union() {\n      cube([30, 30, 30], center = true);\n      cube([40, 15, 15], center = true);\n      cube([15, 40, 15], center = true);\n      cube([15, 15, 40], center = true);\n    }\n    union() {\n      cube([50, 10, 10], center = true);\n      cube([10, 50, 10], center = true);\n      cube([10, 10, 50], center = true);\n    }\n  }\n}\n\necho(version=version());\n\nexample003();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example004.scad",
      "ext": ".scad",
      "bytes": 623,
      "sha256": "9a12deaab74c66a6dca25c556b79062588534ce27e2292a6075fa64420a375ed",
      "content": "\nmodule example004()\n{\n  difference() {\n    cube(30, center = true);\n    sphere(20);\n  }\n}\n\necho(version=version());\n\nexample004();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example005.scad",
      "ext": ".scad",
      "bytes": 997,
      "sha256": "f4ddc797b34718be054f67ee583bf71c79f5e50bc65ee9c56cd94fb79908e6c7",
      "content": "\nmodule example005()\n{\n  translate([0, 0, -120]) {\n    difference() {\n      cylinder(h = 50, r = 100);\n      translate([0, 0, 10]) cylinder(h = 50, r = 80);\n      translate([100, 0, 35]) cube(50, center = true);\n    }\n    for (i = [0:5]) {\n      echo(360*i/6, sin(360*i/6)*80, cos(360*i/6)*80);\n      translate([sin(360*i/6)*80, cos(360*i/6)*80, 0 ])\n        cylinder(h = 200, r=10);\n    }\n    translate([0, 0, 200])\n      cylinder(h = 80, r1 = 120, r2 = 0);\n  }\n}\n\necho(version=version());\n\nexample005();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example006.scad",
      "ext": ".scad",
      "bytes": 1789,
      "sha256": "20aa97b62c8e36a53d0aa785fa239e7ca27f01fe03cd7f9e2de0840be6c30b97",
      "content": "module rounded_cube(size,r,center=false)\n{\n  s = is_list(size) ? size : [size,size,size];\n  translate(center ? -s/2 : [0,0,0])\n    hull() {\n      translate([    r,    r,    r]) sphere(r=r);\n      translate([    r,    r,s.z-r]) sphere(r=r);\n      translate([    r,s.y-r,    r]) sphere(r=r);\n      translate([    r,s.y-r,s.z-r]) sphere(r=r);\n      translate([s.x-r,    r,    r]) sphere(r=r);\n      translate([s.x-r,    r,s.z-r]) sphere(r=r);\n      translate([s.x-r,s.y-r,    r]) sphere(r=r);\n      translate([s.x-r,s.y-r,s.z-r]) sphere(r=r);\n    }\n}\n\nmodule example006()\n{\n\n  difference() {\n    rounded_cube(100, 10, center=true);\n    union() {\n      for (i = [\n        [ 0, 0, [ [0, 0] ] ],\n        [ 90, 0, [ [-20, -20], [+20, +20] ] ],\n        [ 180, 0, [ [-20, -25], [-20, 0], [-20, +25], [+20, -25], [+20, 0], [+20, +25] ] ],\n        [ 270, 0, [ [0, 0], [-25, -25], [+25, -25], [-25, +25], [+25, +25] ] ],\n        [ 0, 90, [ [-25, -25], [0, 0], [+25, +25] ] ],\n        [ 0, -90, [ [-25, -25], [+25, -25], [-25, +25], [+25, +25] ] ]\n      ]) {\n      rotate(i[0], [0, 0, 1])\n        rotate(i[1], [1, 0, 0])\n          translate([0, -50, 0])\n            for (j = i[2]) {\n              translate([j[0], 0, j[1]]) sphere(10);\n            }\n      }\n    }\n  }\n}\n\necho(version=version());\n\nexample006();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example007.scad",
      "ext": ".scad",
      "bytes": 1705,
      "sha256": "6f5b15c60dfaf5e4410cd6f8b5db4e47225c713297ac716d55254a011c033a4a",
      "content": "\nmodule cutout()\n{\n    intersection() {\n      rotate(90, [1, 0, 0])\n        translate([0, 0, -50])\n          linear_extrude(height = 100, convexity = 1)\n            import(file = \"example007.dxf\", layer = \"cutout1\");\n      \n      rotate(90, [0, 0, 1])\n        rotate(90, [1, 0, 0])\n          translate([0, 0, -50])\n            linear_extrude(height = 100, convexity = 2)\n              import(file = \"example007.dxf\", layer = \"cutout2\");\n    }\n}\n\nmodule clip()\n{\n  difference() {\n    rotate_extrude(convexity = 3, $fn = 0, $fa = 12, $fs = 2) {\n      import(file = \"example007.dxf\", layer = \"dorn\");\n    }\n    for (r = [0, 90])\n      rotate(r, [0, 0, 1])\n        cutout();\n  }\n}\n\nmodule cutview()\n{\n  difference() {\n    difference() {\n      translate([0, 0, -10]) clip();\n\n      rotate(20, [0, 0, 1])\n        rotate(-20, [0, 1, 0])\n          translate([18, 0, 0])\n            cube(30, center = true);\n    }\n\n    # render(convexity = 5) intersection() {\n      translate([0, 0, -10])\n        clip();\n    \n      rotate(20, [0, 0, 1])\n        rotate(-20, [0, 1, 0])\n          translate([18, 0, 0])\n            cube(30, center = true);\n    }\n  }\n}\n\necho(version=version());\n\ntranslate([0, 0, -10]) clip();\n\n// cutview();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example008.scad",
      "ext": ".scad",
      "bytes": 1368,
      "sha256": "009bd4ecc16439b2c69276f5dfa9375335c869530952ca159e1c68f205a4ced8",
      "content": "echo(version=version());\n\ndifference() {\n  intersection() {\n    translate([ -25, -25, -25])\n      linear_extrude(height = 50, convexity = 3)\n        import(file = \"example008.dxf\", layer = \"G\");\n    \n    rotate(90, [1, 0, 0])\n      translate([ -25, -125, -25])\n        linear_extrude(height = 50, convexity = 3)\n          import(file = \"example008.dxf\", layer = \"E\");\n    \n    rotate(90, [0, 1, 0])\n      translate([ -125, -125, -25])\n        linear_extrude(height = 50, convexity = 3)\n          import(file = \"example008.dxf\", layer = \"B\");\n  }\n\n  intersection() {\n    translate([ -125, -25, -26])\n      linear_extrude(height = 52, convexity = 1)\n        import(file = \"example008.dxf\", layer = \"X\");\n\n    rotate(90, [0, 1, 0])\n      translate([ -125, -25, -26])\n        linear_extrude(height = 52, convexity = 1)\n          import(file = \"example008.dxf\", layer = \"X\");\n  }\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example009.scad",
      "ext": ".scad",
      "bytes": 1484,
      "sha256": "4e9542b210acc417ae9c9a626134f3c87c19ae5787105c93134a7dd91e70102b",
      "content": "echo(version=version());\n\nbodywidth = dxf_dim(file = \"example009.dxf\", name = \"bodywidth\");\nfanwidth = dxf_dim(file = \"example009.dxf\", name = \"fanwidth\");\nplatewidth = dxf_dim(file = \"example009.dxf\", name = \"platewidth\");\nfan_side_center = dxf_cross(file = \"example009.dxf\", layer = \"fan_side_center\");\nfanrot = dxf_dim(file = \"example009.dxf\", name = \"fanrot\");\n\n% linear_extrude(height = bodywidth, center = true, convexity = 10)\n  import(file = \"example009.dxf\", layer = \"body\");\n\n% for (z = [+(bodywidth/2 + platewidth/2),\n    -(bodywidth/2 + platewidth/2)]) {\n  translate([0, 0, z])\n    linear_extrude(height = platewidth, center = true, convexity = 10)\n      import(file = \"example009.dxf\", layer = \"plate\");\n}\n\nintersection() {\n  linear_extrude(height = fanwidth, center = true, convexity = 10, twist = -fanrot)\n    import(file = \"example009.dxf\", layer = \"fan_top\");\n    \n  rotate_extrude(convexity = 10)\n    import(file = \"example009.dxf\", layer = \"fan_side\", origin = [0, -40]);\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example010.scad",
      "ext": ".scad",
      "bytes": 823,
      "sha256": "c79478b94b30227319e5b06d523b036101b45fe3fd58a9279108e1fdd6316baa",
      "content": "\n// example010.dat generated using octave:\n//   d = (sin(1:0.2:10)' * cos(1:0.2:10)) * 10;\n//   save(\"example010.dat\", \"d\");\n\necho(version=version());\n\nintersection() {\n  surface(file = \"example010.dat\", center = true, convexity = 5);\n  \n  rotate(45, [0, 0, 1])\n    surface(file = \"example010.dat\", center = true, convexity = 5);\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example011.scad",
      "ext": ".scad",
      "bytes": 728,
      "sha256": "f88ddfd147538e0afe2aca17e75cff1ce7748c1b4b12285d6b20e6788ca472dc",
      "content": "echo(version=version());\n\npolyhedron(\n  points = [\n    [10, 0, 0],\n    [0, 10, 0],\n    [-10, 0, 0],\n    [0, -10, 0],\n    [0, 0, 10]\n  ],\n  triangles = [\n    [0, 1, 2, 3],\n    [4, 1, 0],\n    [4, 2, 1],\n    [4, 3, 2],\n    [4, 0, 3]\n  ]\n);\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example012.scad",
      "ext": ".scad",
      "bytes": 718,
      "sha256": "5bebdf8fe6831cc3f324355aa2891ad6d4d336fe8c9d40317f3e53322deb798c",
      "content": "// example012.stl is generated from Basics/LetterBlock.scad\n\necho(version=version());\n\ndifference() {\n  sphere(20);\n  \n  translate([ -2.92, 0.5, +20 ])\n    rotate([180, 0, 180])\n      import(\"example012.stl\", convexity = 5);\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example013.scad",
      "ext": ".scad",
      "bytes": 877,
      "sha256": "9264a488cef3ec16e8f1f9fa4e59ee77ce5c44214450593fa6da2ff414c91fcd",
      "content": "echo(version=version());\n\nintersection() {\n  linear_extrude(height = 100, center = true, convexity= 3)\n    import(file = \"example013.dxf\");\n  rotate([0, 90, 0])\n    linear_extrude(height = 100, center = true, convexity= 3)\n      import(file = \"example013.dxf\");\n  rotate([90, 0, 0])\n    linear_extrude(height = 100, center = true, convexity= 3)\n      import(file = \"example013.dxf\");\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example014.scad",
      "ext": ".scad",
      "bytes": 673,
      "sha256": "a9889cde8840c3e02483a5a6526fddc22d3770914d35669f658a76ad16199bbe",
      "content": "echo(version=version());\n\nintersection_for(i = [\n      [0, 0, 0],\n      [10, 20, 300],\n      [200, 40, 57],\n      [20, 88, 57]\n    ])\n  rotate(i) cube([100, 20, 20], center = true);\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example015.scad",
      "ext": ".scad",
      "bytes": 1018,
      "sha256": "c8fedd6456539dc7e6c2a576631073906ac4d0714332f10d605571295b647197",
      "content": "\nmodule shape()\n{\n  difference() {\n    translate([ -35, -35 ]) intersection() {\n      union() {\n        difference() {\n          square(100, true);\n          square(50, true);\n        }\n        translate([ 50, 50 ]) square(15, true);\n      }\n      rotate(45) translate([ 0, -15 ]) square([ 100, 30 ]);\n    }\n  \n    rotate(-45) scale([ 0.7, 1.3 ]) circle(5);\n  }\n  \n  import(file = \"example009.dxf\", layer = \"body\", convexity = 6, scale=2);\n}\n\necho(version=version());\n\n// linear_extrude(convexity = 10, center = true)\nshape();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example016.scad",
      "ext": ".scad",
      "bytes": 1136,
      "sha256": "723985eaab55cfc0ac223da3f28d8d1b1f6e5d29bb6e3badff254a5ac0210bc6",
      "content": "// chopped_blocks.stl is derived from Basics/LetterBlock.scad\n// The exported STL was converted to binary using MeshLab\n\nmodule blk1() {\n  cube([ 65, 28, 28 ], center = true);\n}\n\nmodule blk2() {\n  difference() {\n    translate([ 0, 0, 7.5 ]) cube([ 60, 28, 14 ], center = true);\n    cube([ 8, 32, 32 ], center = true);\n  }\n}\n\nmodule chop() {\n  translate([ -18, 0, 0 ])\n    import(file = \"example016.stl\", convexity = 12);\n}\n\necho(version=version());\n\ndifference() {\n  blk1();\n  for (alpha = [0, 90, 180, 270]) {\n    rotate(alpha, [ 1, 0, 0])\n      render(convexity = 12)\n        difference() {\n          blk2();\n          chop();\n        }\n  }\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example017.scad",
      "ext": ".scad",
      "bytes": 4768,
      "sha256": "ef9cc90794ee25e39364198fe7764cd9e8ddbcca5bd2fe6aa05d8810a0919b02",
      "content": "\n// To render the DXF file from the command line:\n// openscad -o example017.dxf -D'mode=\"parts\"' example017.scad\n\n//Mode can be either \"parts\",  \"exploded\" or \"assembled\".\nmode = \"assembled\"; // [\"parts\",  \"exploded\", \"assembled\"]\n\nthickness = 6;\nlocklen1 = 15;\nlocklen2 = 10;\nboltlen = 15;\nmidhole = 10;\ninner1_to_inner2 = 50;\ntotal_height = 80;\n\nmodule shape_tripod()\n{\n  x1 = 0;\n  x2 = x1 + thickness;\n  x3 = x2 + locklen1;\n  x4 = x3 + thickness;\n  x5 = x4 + inner1_to_inner2;\n  x6 = x5 - thickness;\n  x7 = x6 - locklen2;\n  x8 = x7 - thickness;\n  x9 = x8 - thickness;\n  x10 = x9 - thickness;\n  \n  y1 = 0;\n  y2 = y1 + thickness;\n  y3 = y2 + thickness;\n  y4 = y3 + thickness;\n  y5 = y3 + total_height - 3*thickness;\n  y6 = y5 + thickness;\n  \n  union() {\n    difference() {\n      polygon([\n        [ x1, y2 ], [ x2, y2 ],\n        [ x2, y1 ], [ x3, y1 ], [ x3, y2 ],\n        [ x4, y2 ], [ x4, y1 ], [ x5, y1 ],\n        [ x5 + thickness, y3 ], [ x5, y4 ],\n        [ x5, y5 ],\n        [ x6, y5 ], [ x6, y6 ], [ x7, y6 ], [ x7, y5 ], [ x8, y5 ],\n        [ x8, y6 ], [ x9, y5 ],\n        [ x9, y4 ], [ x10, y3 ],\n        [ x2, y3 ]\n      ]);\n      translate([ x10, y4 ]) circle(thickness);\n      translate([ x5 + thickness, y4 ]) circle(thickness);\n    }\n  \n    translate([ x5, y1 ]) square([ boltlen - thickness, thickness*2 ]);\n  \n    translate([ x5 + boltlen - thickness, y2 ]) circle(thickness);\n  \n    translate([ x2, y2 ]) intersection() {\n      circle(thickness);\n      translate([ -thickness*2, 0 ]) square(thickness*2);\n    }\n  \n    translate([ x8, y5 ]) intersection() {\n      circle(thickness);\n      translate([ -thickness*2, 0 ]) square(thickness*2);\n    }\n  }\n}\n\nmodule shape_inner_disc()\n{\n  difference() {\n    circle(midhole + boltlen + 2*thickness + locklen2);\n    for (alpha = [ 0, 120, 240 ]) {\n      rotate(alpha) translate([ 0, midhole + boltlen + thickness + locklen2/2 ]) square([ thickness, locklen2 ], true);\n    }\n    circle(midhole + boltlen);\n  }\n}\n\nmodule shape_outer_disc()\n{\n  difference() {\n    circle(midhole + boltlen + inner1_to_inner2 + 2*thickness + locklen1);\n    for (alpha = [ 0, 120, 240 ]) {\n      rotate(alpha) translate([ 0, midhole + boltlen + inner1_to_inner2 + thickness + locklen1/2 ]) square([ thickness, locklen1 ], true);\n    }\n    circle(midhole + boltlen + inner1_to_inner2);\n  }\n}\n\nmodule parts()\n{\n  tripod_x_off = locklen1 - locklen2 + inner1_to_inner2;\n  tripod_y_off = max(midhole + boltlen + inner1_to_inner2 + 4*thickness + locklen1, total_height);\n\n  shape_inner_disc();\n  shape_outer_disc();\n\n  for (s = [ [1,1], [-1,1], [1,-1] ]) {\n    scale(s) translate([ tripod_x_off, -tripod_y_off ]) shape_tripod();\n  }\n}\n\nmodule exploded()\n{\n  translate([ 0, 0, total_height + 2*thickness ]) linear_extrude(height = thickness, convexity = 4) shape_inner_disc();\n  linear_extrude(height = thickness, convexity = 4) shape_outer_disc();\n\n  color([ 0.7, 0.7, 1 ]) for (alpha = [ 0, 120, 240 ]) {\n    rotate(alpha)\n      translate([ 0, thickness*2 + locklen1 + inner1_to_inner2 + boltlen + midhole, 1.5*thickness ])\n        rotate([ 90, 0, -90 ])\n          linear_extrude(height = thickness, convexity = 10, center = true) shape_tripod();\n  }\n}\n\nmodule bottle()\n{\n  r = boltlen + midhole;\n  h = total_height - thickness*2;\n\n  rotate_extrude(convexity = 2) {\n    square([ r, h ]);\n\n    translate([ 0, h ]) {\n      intersection() {\n        square([ r, r ]);\n        scale([ 1, 0.7 ]) circle(r);\n      }\n    }\n    translate([ 0, h+r ]) {\n      intersection() {\n        translate([ 0, -r/2 ]) square([ r/2, r ]);\n        circle(r/2);\n      }\n    }\n  }\n}\n\nmodule assembled()\n{\n  translate([ 0, 0, total_height - thickness ]) linear_extrude(height = thickness, convexity = 4) shape_inner_disc();\n  linear_extrude(height = thickness, convexity = 4) shape_outer_disc();\n\n  color([ 0.7, 0.7, 1 ]) for (alpha = [ 0, 120, 240 ]) {\n    rotate(alpha)\n      translate([ 0, thickness*2 + locklen1 + inner1_to_inner2 + boltlen + midhole, 0 ])\n        rotate([ 90, 0, -90 ])\n          linear_extrude(height = thickness, convexity = 10, center = true) shape_tripod();\n  }\n\n  % translate([ 0, 0, thickness*2]) bottle();\n}\n\necho(version=version());\n\nif (mode == \"parts\") parts();\n\nif (mode == \"exploded\") exploded();\n\nif (mode == \"assembled\") assembled();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example018.scad",
      "ext": ".scad",
      "bytes": 981,
      "sha256": "b34500ac57dd02eb626715a7113cd6c24e92bd558326ea7f6aca5d32d67a179c",
      "content": "\nmodule step(len, mod)\n{\n  for (i = [0:$children-1]) {\n    translate([ len*(i - ($children-1)/2), 0, 0 ]) children((i+mod) % $children);\n  }\n}\n\necho(version=version());\n\nfor (i = [1:4]) {\n  translate([0, -250+i*100, 0]) step(100, i) {\n    sphere(30);\n    cube(60, true);\n    cylinder(r = 30, h = 50, center = true);\n  \n    union() {\n      cube(45, true);\n      rotate([45, 0, 0]) cube(50, true);\n      rotate([0, 45, 0]) cube(50, true);\n      rotate([0, 0, 45]) cube(50, true);\n    }\n  }\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example019.scad",
      "ext": ".scad",
      "bytes": 755,
      "sha256": "8874bbba3a4b1f487dd3275223410399096755cb00d443c5b86fed2523538508",
      "content": "\nfunction get_cylinder_h(p) = lookup(p, [\n    [ -200, 5 ],\n    [ -50, 20 ],\n    [ -20, 18 ],\n    [ +80, 25 ],\n    [ +150, 2 ]\n  ]);\n\necho(version=version());\nfor (i = [-100:5:+100]) {\n  translate([ i, 0, -30 ]) cylinder(r1 = 6, r2 = 2, h = get_cylinder_h(i)*3);\n}\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example020.scad",
      "ext": ".scad",
      "bytes": 2711,
      "sha256": "62b96f70f41a6232e8a6398cc61c7c1d0eea3ceef17c9fa1ec62fa9f2b5d2b1e",
      "content": "\nmodule screw(type = 2, r1 = 15, r2 = 20, n = 7, h = 100, t = 8)\n{\n  linear_extrude(height = h, twist = 360*t/n, convexity = t)\n  difference() {\n    circle(r2);\n    for (i = [0:n-1]) {\n        if (type == 1) rotate(i*360/n) polygon([\n            [ 2*r2, 0 ],\n            [ r2, 0 ],\n            [ r1*cos(180/n), r1*sin(180/n) ],\n            [ r2*cos(360/n), r2*sin(360/n) ],\n            [ 2*r2*cos(360/n), 2*r2*sin(360/n) ],\n        ]);\n        if (type == 2) rotate(i*360/n) polygon([\n            [ 2*r2, 0 ],\n            [ r2, 0 ],\n            [ r1*cos(90/n), r1*sin(90/n) ],\n            [ r1*cos(180/n), r1*sin(180/n) ],\n            [ r2*cos(270/n), r2*sin(270/n) ],\n            [ 2*r2*cos(270/n), 2*r2*sin(270/n) ],\n        ]);\n    }\n  }\n}\n\nmodule nut(type = 2, r1 = 16, r2 = 21, r3 = 30, s = 6, n = 7, h = 100/5, t = 8/5)\n{\n  difference() {\n    cylinder($fn = s, r = r3, h = h);\n    translate([ 0, 0, -h/2 ]) screw(type, r1, r2, n, h*2, t*2);\n  }\n}\n\nmodule spring(r1 = 100, r2 = 10, h = 100, hr = 12)\n{\n  stepsize = 1/16;\n  module segment(i1, i2) {\n    alpha1 = i1 * 360*r2/hr;\n    alpha2 = i2 * 360*r2/hr;\n    len1 = sin(acos(i1*2-1))*r2;\n    len2 = sin(acos(i2*2-1))*r2;\n    if (len1 < 0.01) {\n      polygon([\n        [ cos(alpha1)*r1, sin(alpha1)*r1 ],\n        [ cos(alpha2)*(r1-len2), sin(alpha2)*(r1-len2) ],\n        [ cos(alpha2)*(r1+len2), sin(alpha2)*(r1+len2) ]\n      ]);\n    }\n    if (len2 < 0.01) {\n      polygon([\n        [ cos(alpha1)*(r1+len1), sin(alpha1)*(r1+len1) ],\n        [ cos(alpha1)*(r1-len1), sin(alpha1)*(r1-len1) ],\n        [ cos(alpha2)*r1, sin(alpha2)*r1 ],\n      ]);\n    }\n    if (len1 >= 0.01 && len2 >= 0.01) {\n      polygon([\n        [ cos(alpha1)*(r1+len1), sin(alpha1)*(r1+len1) ],\n        [ cos(alpha1)*(r1-len1), sin(alpha1)*(r1-len1) ],\n        [ cos(alpha2)*(r1-len2), sin(alpha2)*(r1-len2) ],\n        [ cos(alpha2)*(r1+len2), sin(alpha2)*(r1+len2) ]\n      ]);\n    }\n  }\n  linear_extrude(height = 100, twist = 180*h/hr,\n                 $fn = (hr/r2)/stepsize, convexity = 5) {\n    for (i = [ stepsize : stepsize : 1+stepsize/2 ])\n      segment(i-stepsize, min(i, 1));\n  }\n}\n\necho(version=version());\ntranslate([ -30, 0, 0 ]) screw();\n\ntranslate([ 30, 0, 0 ]) nut();\n\nspring();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example021.scad",
      "ext": ".scad",
      "bytes": 1284,
      "sha256": "ec8baf401f1c8d212cfca3aabe950263692581c20f96402628fe530acecb28ec",
      "content": "\nmodule thing()\n{\n  $fa = 30;\n  difference() {\n    sphere(r = 25);\n    cylinder(h = 62.5, r1 = 12.5, r2 = 6.25, center = true);\n    rotate(90, [ 1, 0, 0 ]) cylinder(h = 62.5,\n        r1 = 12.5, r2 = 6.25, center = true);\n    rotate(90, [ 0, 1, 0 ]) cylinder(h = 62.5,\n        r1 = 12.5, r2 = 6.25, center = true);\n  }\n}\n\nmodule demo_proj()\n{\n  linear_extrude(center = true, height = 0.5) projection(cut = false) thing();\n  % thing();\n}\n\nmodule demo_cut()\n{\n  for (i=[-20:5:+20]) {\n     rotate(-30, [ 1, 1, 0 ]) translate([ 0, 0, -i ])\n      linear_extrude(center = true, height = 0.5) projection(cut = true)\n        translate([ 0, 0, i ]) rotate(+30, [ 1, 1, 0 ]) thing();\n  }\n  % thing();\n}\n\necho(version=version());\ntranslate([ -30, 0, 0 ]) demo_proj();\ntranslate([ +30, 0, 0 ]) demo_cut();\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example022.scad",
      "ext": ".scad",
      "bytes": 1754,
      "sha256": "63c7a2e093f1dba2fbe672e083ed930918cc6ec1b11b26ccd3054b0ca5b965af",
      "content": "// size is a vector [w, h, d]\nmodule roundedBox(size, radius, sidesonly)\n{\n  rot = [ [0,0,0], [90,0,90], [90,90,0] ];\n  if (sidesonly) {\n    cube(size - [2*radius,0,0], true);\n    cube(size - [0,2*radius,0], true);\n    for (x = [radius-size[0]/2, -radius+size[0]/2],\n         y = [radius-size[1]/2, -radius+size[1]/2]) {\n      translate([x,y,0]) cylinder(r=radius, h=size[2], center=true);\n    }\n  }\n  else {\n    cube([size[0], size[1]-radius*2, size[2]-radius*2], center=true);\n    cube([size[0]-radius*2, size[1], size[2]-radius*2], center=true);\n    cube([size[0]-radius*2, size[1]-radius*2, size[2]], center=true);\n\n    for (axis = [0:2]) {\n      for (x = [radius-size[axis]/2, -radius+size[axis]/2],\n          y = [radius-size[(axis+1)%3]/2, -radius+size[(axis+1)%3]/2]) {\n        rotate(rot[axis]) \n          translate([x,y,0]) \n          cylinder(h=size[(axis+2)%3]-2*radius, r=radius, center=true);\n      }\n    }\n    for (x = [radius-size[0]/2, -radius+size[0]/2],\n        y = [radius-size[1]/2, -radius+size[1]/2],\n        z = [radius-size[2]/2, -radius+size[2]/2]) {\n      translate([x,y,z]) sphere(radius);\n    }\n  }\n}\n\necho(version=version());\ntranslate([-15,0,0])roundedBox([20,30,40], 5, true);\ntranslate([15,0,0]) roundedBox([20,30,40], 5, false);\n\n// Written by Clifford Wolf <clifford@clifford.at> and Marius\n// Kintel <marius@kintel.net>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example023.scad",
      "ext": ".scad",
      "bytes": 1224,
      "sha256": "b575c92eea09a879e23a10f5b05aade2bade4228e400657059e549d2b06d6afb",
      "content": "// Example combining MCAD/fonts.scad with search() function.\n\nuse <MCAD/fonts.scad>\n\necho(version=version());\n\nthisFont=8bit_polyfont();\nx_shift=thisFont[0][0];\ny_shift=thisFont[0][1];\n\nhours=[\"one\",\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"eleven\",\"twelve\"];\n\nmodule clock_hour_words(word_offset=20.0,word_height=2.0) {\n  for(i=[0:(len(hours)-1)]) {\n    hourHandAngle=(i+1)*360/len(hours);\n    theseIndicies=search(hours[i],thisFont[2],1,1);\n    rotate(90-hourHandAngle) translate([word_offset,0])\n    for( j=[0:(len(theseIndicies)-1)] ) translate([j*x_shift,-y_shift/2]) {\n      linear_extrude(height=word_height) polygon(points=thisFont[2][theseIndicies[j]][6][0],paths=thisFont[2][theseIndicies[j]][6][1]);\n    }\n  }\n}\n\nclock_hour_words(word_offset=16.0,word_height=5.0);\n\n// Written by Andrew Plumb\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Old\\example024.scad",
      "ext": ".scad",
      "bytes": 1156,
      "sha256": "9f958bcb00753e68446e5ac8d311a793defad0f119fd4e703de4ba18a5f49f76",
      "content": "// Menger Sponge\n\n// Size of edge of sponge\nD=100;\n// Fractal depth (number of iterations)\nn=3;\n\necho(version=version());\n\nmodule menger() {\n  difference() {\n    cube(D, center=true);\n    for (v=[[0,0,0], [0,0,90], [0,90,0]])\n      rotate(v) menger_negative(side=D, maxside=D, level=n);\n  }\n}\n\nmodule menger_negative(side=1, maxside=1, level=1) {\n  l=side/3;\n  cube([maxside*1.1, l, l], center=true);\n  if (level > 1) {\n    for (i=[-1:1], j=[-1:1])\n      if (i || j)\n        translate([0, i*l, j*l])\n          menger_negative(side=l, maxside=maxside, level=level-1);\n  }\n}\n\ndifference() {\n  rotate([45, atan(1/sqrt(2)), 0]) menger();\n  translate([0,0,-D]) cube(2*D, center=true);\n}\n\n// Written by Nathan Hellweg, Emmett Lalish and Marius Kintel May 13, 2013\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Parametric\\candleStand.scad",
      "ext": ".scad",
      "bytes": 2824,
      "sha256": "a4234a820e7ce34c6f1e4d6f33e77d8951a2da96fcbf87a5d191f3c592277622",
      "content": "/*[ Candle Stand ]*/\n//Length of candle stand\nlength=50; // [70:large,50:medium,30:small]\n\n// Center stand\ncylinder(length,width-2);\n\n//Radius of ring of stand\nradius=25;\n\n/* [ Number of candle holders ]*/\n// Number of candle holders\ncount=7; //[3:14]\n\n//Do you want center Candle\ncenterCandle=true;\n\n/* [ Candle Holder ]*/\n//Length of candle holder\ncandleSize=7;\n\n//Width of candle holder\nwidth=4;\n\n//Size of hole for candle holder\nholeSize=3;\n\nCenterCandleWidth=4;\n\n/*[Properties of support]*/\n\nheightOfSupport=3;\nwidthOfSupport=3;\n\n/*[Properties of Ring]*/\n\nheightOfRing=4;\n\nwidthOfRing=23;\n\n\n//Create center candle\ntranslate([0,0,length-candleSize/2])\nif(centerCandle){\n    difference(){\n        $fn=360;\n        cylinder(candleSize,r=CenterCandleWidth);\n        cylinder(candleSize+1,r=CenterCandleWidth-2);\n    }\n}else{\n        sphere(CenterCandleWidth);\n}\n\n//make ring \ntranslate([0,0,length-candleSize/2]){\n    make(radius, count,candleSize,length);\n    //make bottom cover for candle holders\n    make_ring_of(radius, count){\n        cylinder(1,r=width);\n    }\n}\n\n\n//Base of candle stand\nfor (a = [0 : count - 1]) {\n    rotate(a*360/count) {\n    translate([0, -width/2, 0]) \n        cube([radius, widthOfSupport, heightOfSupport]);\n    }\n}\n\n//make ring with candle holders\nmodule make(radius, count,candleSize,length){\n    \n    $fa = 0.5;\n    $fs = 0.5;\n    difference(){\n        union(){\n             //making holders\n            make_ring_of(radius, count){ \n                cylinder(candleSize,r=width);\n            }\n            \n            //Attaching holders to stand\n            for (a = [0 : count - 1]) {\n                rotate(a*360/count) {\n                translate([0, -width/2, 0]) \n                    cube([radius, widthOfSupport, heightOfSupport]);\n                }\n            }\n            \n            // make ring\n            linear_extrude(heightOfRing, convexity=2)\n            difference(){    \n                circle(radius);\n                circle(widthOfRing);\n            }\n        }\n        //Making holes in candle holder\n        make_ring_of(radius, count){\n            cylinder(candleSize+1,r=holeSize);\n        }\n    }\n}\n\n\nmodule make_ring_of(radius, count){\n    for (a = [0 : count - 1]) {\n        angle = a * 360 / count;\n        translate(radius * [cos(angle), -sin(angle), 0])\n                children();\n    }\n}\n\n// Written by Amarjeet Singh Kapoor <amarjeet.kapoor1@gmail.com>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "Parametric\\sign.scad",
      "ext": ".scad",
      "bytes": 1714,
      "sha256": "30b17f287d810d2734ec006f6db1ec315d02f0d64c76d03f93f2af4709b2af8b",
      "content": "// First example of parameteric model\n//   \n//    syntax: \n//        //Description\n//        variable=value; //Parameter\n//        \n//        This type of comment tells the name of group to which parameters below\n//        this comment will belong \n//    \n//       /*[ group name ]*/ \n//\n\n\n//Below comment tells the group to which a variable will belong\n/*[ properties of Sign]*/\n\n//The resolution of the curves. Higher values give smoother curves but may increase the model render time.\nresolution = 10; //[10, 20, 30, 50, 100]\n\n//The horizontal radius of the outer ellipse of the sign.\nradius = 80;//[60 : 200]\n\n//Total height of the sign\nheight = 2;//[1 : 10]\n\n/*[ Content To be written ] */\n\n//Message to be write \nMessage = \"Welcome to...\"; //[\"Welcome to...\", \"Happy Birthday!\", \"Happy Anniversary\", \"Congratulations\", \"Thank You\"]\n\n//Name of Person, company etc.\nTo = \"Parametric Designs\";\n\n$fn = resolution;\n\nscale([1, 0.5]) difference() {\n    cylinder(r = radius, h = 2 * height, center = true);\n    translate([0, 0, height])\n        cylinder(r = radius - 10, h = height + 1, center = true);\n}\nlinear_extrude(height = height) {\n    translate([0, --4]) text(Message, halign = \"center\");\n    translate([0, -16]) text(To, halign = \"center\");\n}\n\n// Written by Amarjeet Singh Kapoor <amarjeet.kapoor1@gmail.com>\n//\n// To the extent possible under law, the author(s) have dedicated all\n// copyright and related and neighboring rights to this software to the\n// public domain worldwide. This software is distributed without any\n// warranty.\n//\n// You should have received a copy of the CC0 Public Domain\n// Dedication along with this software.\n// If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.\n"
    },
    {
      "path": "build-manifest.json",
      "ext": ".json",
      "bytes": 1897,
      "sha256": "710085c882eba10794cf971c1d9b61b915c38b4c8c832e3b1d8af27a4c412dd8",
      "content": "#!/usr/bin/env node\r\n/**\r\n * FlexiCAD – AI Reference Manifest Builder\r\n * Scans ai-reference/** for .scad, .md, .json; writes ai-reference/manifest.json\r\n */\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport crypto from \"crypto\";\r\nimport { fileURLToPath } from \"url\";\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\nconst ROOT = path.resolve(__dirname);\r\nconst OUT = path.join(ROOT, \"manifest.json\");\r\nconst ALLOWED = new Set([\".scad\", \".md\", \".json\"]);\r\n\r\nconst ts = () => new Date().toISOString();\r\nconst log = m => process.stdout.write(`[${ts()}] ${m}\\n`);\r\nconst sha = b => crypto.createHash(\"sha256\").update(b).digest(\"hex\");\r\n\r\nfunction walk(dir) {\r\n  const out = [];\r\n  for (const e of fs.readdirSync(dir, { withFileTypes: true })) {\r\n    const p = path.join(dir, e.name);\r\n    if (e.isDirectory()) out.push(...walk(p));\r\n    else out.push(p);\r\n  }\r\n  return out;\r\n}\r\n\r\n(function main(){\r\n  log(\"=== Build AI Reference Manifest ===\");\r\n  if (!fs.existsSync(ROOT)) {\r\n    log(`ERROR: ai-reference path not found: ${ROOT}`);\r\n    process.exit(1);\r\n  }\r\n  const files = walk(ROOT)\r\n    .filter(p => ALLOWED.has(path.extname(p).toLowerCase()))\r\n    .filter(p => p !== OUT);\r\n\r\n  const items = files.map(full => {\r\n    const rel = path.relative(ROOT, full).replace(/\\\\/g,\"/\");\r\n    const buf = fs.readFileSync(full);\r\n    const text = buf.toString(\"utf8\");\r\n    return {\r\n      id: sha(Buffer.from(rel)),\r\n      path: rel,\r\n      ext: path.extname(full).slice(1),\r\n      bytes: buf.length,\r\n      sha256: sha(buf),\r\n      // keep full content; we’ll truncate when sampling\r\n      content: text\r\n    };\r\n  });\r\n\r\n  const manifest = { version: 1, generated_at: ts(), root: ROOT, count: items.length, items };\r\n  fs.writeFileSync(OUT, JSON.stringify(manifest, null, 2), \"utf8\");\r\n  log(`Wrote: ${OUT} (${items.length} items)`);\r\n})();\r\n"
    },
    {
      "path": "examples.json",
      "ext": ".json",
      "bytes": 1201,
      "sha256": "10b43ddbf09ebddbf0aaae4e4f4436365394e80565f840aa4d1d0f5895232ce9",
      "content": "{\n  \"Basics\": [\n    \"CSG.scad\",\n    \"CSG-modules.scad\",\n    \"logo.scad\",\n    \"LetterBlock.scad\",\n    \"logo_and_text.scad\",\n    \"linear_extrude.scad\",\n    \"rotate_extrude.scad\",\n    \"text_on_cube.scad\",\n    \"projection.scad\"\n  ],\n  \"Functions\": [\n    \"echo.scad\",\n    \"functions.scad\",\n    \"list_comprehensions.scad\",\n    \"recursion.scad\",\n    \"polygon_areas.scad\"\n  ],\n  \"Advanced\": [\n    \"offset.scad\",\n    \"surface_image.scad\",\n    \"children.scad\",\n    \"children_indexed.scad\",\n    \"GEB.scad\",\n    \"animation.scad\",\n    \"module_recursion.scad\",\n    \"assert.scad\"\n  ],\n  \"Parametric\": [\n    \"sign.scad\",\n    \"candleStand.scad\"\n  ],\n  \"Old\": [\n    \"example001.scad\",\n    \"example002.scad\",\n    \"example003.scad\",\n    \"example004.scad\",\n    \"example005.scad\",\n    \"example006.scad\",\n    \"example007.scad\",\n    \"example008.scad\",\n    \"example009.scad\",\n    \"example010.scad\",\n    \"example011.scad\",\n    \"example012.scad\",\n    \"example013.scad\",\n    \"example014.scad\",\n    \"example015.scad\",\n    \"example016.scad\",\n    \"example017.scad\",\n    \"example018.scad\",\n    \"example019.scad\",\n    \"example020.scad\",\n    \"example021.scad\",\n    \"example022.scad\",\n    \"example023.scad\",\n    \"example024.scad\"\n  ]\n}\n"
    },
    {
      "path": "Parametric\\candleStand.json",
      "ext": ".json",
      "bytes": 1707,
      "sha256": "b6afe756c2ab0390a806b6387ad5bce3be96284a9b991954aaf3ab034691aec3",
      "content": "{\n    \"parameterSets\": {\n        \"Medium Size\": {\n            \"CenterCandleWidth\": \"6\",\n            \"candleSize\": \"9\",\n            \"centerCandle\": \"true\",\n            \"count\": \"7\",\n            \"heightOfRing\": \"4\",\n            \"heightOfSupport\": \"3\",\n            \"holeSize\": \"3\",\n            \"length\": \"50\",\n            \"radius\": \"25\",\n            \"width\": \"5\",\n            \"widthOfRing\": \"23\",\n            \"widthOfSupport\": \"3\"\n        },\n        \"small\": {\n            \"CenterCandleWidth\": \"4\",\n            \"candleSize\": \"6\",\n            \"centerCandle\": \"true\",\n            \"count\": \"7\",\n            \"heightOfRing\": \"2\",\n            \"heightOfSupport\": \"2\",\n            \"holeSize\": \"2\",\n            \"length\": \"30\",\n            \"radius\": \"16\",\n            \"width\": \"4\",\n            \"widthOfRing\": \"13\",\n            \"widthOfSupport\": \"2\"\n        },\n        \"With Ball\": {\n            \"CenterCandleWidth\": \"7\",\n            \"candleSize\": \"6\",\n            \"centerCandle\": \"false\",\n            \"count\": \"5\",\n            \"heightOfRing\": \"2\",\n            \"heightOfSupport\": \"2\",\n            \"holeSize\": \"2\",\n            \"length\": \"30\",\n            \"radius\": \"16\",\n            \"width\": \"4\",\n            \"widthOfRing\": \"13\",\n            \"widthOfSupport\": \"2\"\n        },\n        \"Large\": {\n            \"CenterCandleWidth\": \"10\",\n            \"candleSize\": \"9\",\n            \"centerCandle\": \"false\",\n            \"count\": \"7\",\n            \"heightOfRing\": \"4\",\n            \"heightOfSupport\": \"3\",\n            \"holeSize\": \"3\",\n            \"length\": \"70\",\n            \"radius\": \"25\",\n            \"width\": \"5\",\n            \"widthOfRing\": \"23\",\n            \"widthOfSupport\": \"3\"\n        }\n    },\n    \"fileFormatVersion\": \"1\"\n}\n"
    },
    {
      "path": "Parametric\\sign.json",
      "ext": ".json",
      "bytes": 657,
      "sha256": "442fe1f24cdc4fe1a79334ecdb1a4e5ccce162f7765d1969ed294b9fef2f82ef",
      "content": "{\n    \"parameterSets\": {\n        \"Welcome sign\": {\n            \"Message\": \"Welcome to...\",\n            \"To\": \"Parametric Designs\",\n            \"height\": \"2\",\n            \"radius\": \"80\",\n            \"resolution\": \"30\"\n        },\n        \"Congo Sign\": {\n            \"Message\": \"Congratulations\",\n            \"To\": \"openSCAD\",\n            \"height\": \"2\",\n            \"radius\": \"67\",\n            \"resolution\": \"20\"\n        },\n        \"Happy birthday sign\": {\n            \"Message\": \"Happy Birthday!\",\n            \"To\": \"To Me\",\n            \"height\": \"2\",\n            \"radius\": \"67\",\n            \"resolution\": \"10\"\n        }\n    },\n    \"fileFormatVersion\": \"1\"\n}\n"
    },
    {
      "path": "Syntax-examples.md",
      "ext": ".md",
      "bytes": 1797,
      "sha256": "df3f77c7f5e1860d7183d21a2e8a90816fad5b07e8366410e05d0f57d4fc14ea",
      "content": "# Syntax Examples Reference\r\n\r\n## This file is for the ai-generation tool for flexicad-designer web program\r\n\r\n### Examples\r\n\r\n    examples.json\r\n|   Syntax-examples.md\r\n|\r\n+---Advanced\r\n|       animation.scad\r\n|       assert.scad\r\n|       children.scad\r\n|       children_indexed.scad\r\n|       GEB.scad\r\n|       module_recursion.scad\r\n|       offset.scad\r\n|       surface_image.png\r\n|       surface_image.scad\r\n|\r\n+---Basics\r\n|       CSG-modules.scad\r\n|       CSG.scad\r\n|       LetterBlock.scad\r\n|       linear_extrude.scad\r\n|       logo.scad\r\n|       logo_and_text.scad\r\n|       projection.scad\r\n|       projection.stl\r\n|       rotate_extrude.scad\r\n|       text_on_cube.scad\r\n|\r\n+---Functions\r\n|       echo.scad\r\n|       functions.scad\r\n|       list_comprehensions.scad\r\n|       polygon_areas.scad\r\n|       recursion.scad\r\n|\r\n+---Old\r\n|       example001.scad\r\n|       example002.scad\r\n|       example003.scad\r\n|       example004.scad\r\n|       example005.scad\r\n|       example006.scad\r\n|       example007.dxf\r\n|       example007.scad\r\n|       example008.dxf\r\n|       example008.scad\r\n|       example009.dxf\r\n|       example009.scad\r\n|       example010.dat\r\n|       example010.scad\r\n|       example011.scad\r\n|       example012.scad\r\n|       example012.stl\r\n|       example013.dxf\r\n|       example013.scad\r\n|       example014.scad\r\n|       example015.scad\r\n|       example016.scad\r\n|       example016.stl\r\n|       example017.scad\r\n|       example018.scad\r\n|       example019.scad\r\n|       example020.scad\r\n|       example021.scad\r\n|       example022.scad\r\n|       example023.scad\r\n|       example024.scad\r\n|\r\n\\---Parametric\r\n        candleStand.json\r\n        candleStand.scad\r\n        sign.json\r\n        sign.scad\r\n\r\n### JSON File\r\n\r\nthe .scad files are the correct syntax for the OPENSCAD Program\r\n"
    }
  ]
}