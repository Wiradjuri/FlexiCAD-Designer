// Adjustable Phone Stand
// A customizable phone stand for desk use
// Generated by FlexiCAD Designer

// Parameters - customize these values
base_width = 120;           // Width of the base
base_depth = 80;            // Depth of the base  
base_height = 5;            // Height of the base
angle = 65;                 // Viewing angle in degrees
phone_thickness = 12;       // Maximum phone thickness
support_height = 60;        // Height of back support
anti_slip_grooves = true;   // Add anti-slip grooves

// Calculated values
back_length = support_height / sin(angle);
groove_spacing = 4;

// Main assembly
phone_stand();

module phone_stand() {
    // Base platform
    difference() {
        // Main base
        rounded_cube([base_width, base_depth, base_height], 3);
        
        // Anti-slip grooves
        if (anti_slip_grooves) {
            for (i = [10 : groove_spacing : base_width - 10]) {
                translate([i, 5, base_height - 1])
                    cube([1.5, base_depth - 10, 2]);
            }
        }
    }
    
    // Back support
    translate([base_width/2 - phone_thickness/2, base_depth - 15, base_height]) {
        rotate([90 - angle, 0, 0]) {
            difference() {
                // Support back
                cube([phone_thickness + 6, support_height, 8]);
                
                // Phone slot
                translate([3, 10, -1])
                    cube([phone_thickness, support_height - 15, 10]);
                
                // Charging cable slot
                translate([phone_thickness/2 + 3 - 5, -1, -1])
                    cube([10, 12, 10]);
            }
        }
    }
    
    // Side supports for stability
    translate([base_width/2 - 20, base_depth - 20, base_height])
        support_triangle();
        
    translate([base_width/2 + 20, base_depth - 20, base_height])
        support_triangle();
}

// Support triangle for stability
module support_triangle() {
    rotate([0, -90, 0])
        linear_extrude(height = 3, center = true)
            polygon([[0, 0], [25, 0], [0, 20]]);
}

// Rounded cube module
module rounded_cube(size, radius) {
    hull() {
        translate([radius, radius, 0])
            cylinder(r = radius, h = size[2]);
        translate([size[0] - radius, radius, 0])
            cylinder(r = radius, h = size[2]);
        translate([radius, size[1] - radius, 0])
            cylinder(r = radius, h = size[2]);
        translate([size[0] - radius, size[1] - radius, 0])
            cylinder(r = radius, h = size[2]);
    }
}