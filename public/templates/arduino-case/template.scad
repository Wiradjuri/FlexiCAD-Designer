// Arduino Uno Case
// A protective enclosure for Arduino Uno R3
// Generated by FlexiCAD Designer

// Parameters - customize these values
board_length = 68.6;        // Length of Arduino Uno
board_width = 53.4;         // Width of Arduino Uno  
board_thickness = 1.6;      // PCB thickness
case_height = 25;           // Internal case height
wall_thickness = 2.5;       // Thickness of walls
lid_thickness = 2;          // Thickness of lid
ventilation_holes = true;   // Add cooling holes
corner_radius = 3;          // Rounded corner radius

// Calculated dimensions
outer_length = board_length + 2 * wall_thickness;
outer_width = board_width + 2 * wall_thickness;
outer_height = case_height + wall_thickness;

// Main assembly
case_base();
translate([0, outer_width + 10, 0]) case_lid();

// Case base with board mount
module case_base() {
    difference() {
        // Outer shell
        rounded_cube([outer_length, outer_width, outer_height], corner_radius);
        
        // Inner cavity
        translate([wall_thickness, wall_thickness, wall_thickness])
            cube([board_length, board_width, case_height + 1]);
        
        // USB port cutout
        translate([-1, wall_thickness + 7.5, wall_thickness + 3])
            cube([wall_thickness + 2, 12, 11]);
        
        // Power jack cutout  
        translate([-1, wall_thickness + 35, wall_thickness + 3])
            cube([wall_thickness + 2, 9, 11]);
        
        // GPIO pin access
        translate([wall_thickness + 15.5, -1, wall_thickness + 8])
            cube([35, wall_thickness + 2, 15]);
        
        // Analog pins access
        translate([wall_thickness + 15.5, outer_width - wall_thickness - 1, wall_thickness + 8])
            cube([35, wall_thickness + 2, 15]);
        
        // Ventilation holes
        if (ventilation_holes) {
            for (x = [10:8:outer_length-10]) {
                for (y = [10:8:outer_width-10]) {
                    translate([x, y, -1])
                        cylinder(d=4, h=wall_thickness + 2);
                }
            }
        }
    }
    
    // Board mounting posts
    translate([wall_thickness + 14, wall_thickness + 2.5, wall_thickness])
        mounting_post();
    translate([wall_thickness + 66, wall_thickness + 7.5, wall_thickness])
        mounting_post();
    translate([wall_thickness + 66, wall_thickness + 35.5, wall_thickness])
        mounting_post();
    translate([wall_thickness + 14, wall_thickness + 50.5, wall_thickness])
        mounting_post();
}

// Case lid
module case_lid() {
    difference() {
        union() {
            // Lid top
            rounded_cube([outer_length, outer_width, lid_thickness], corner_radius);
            
            // Lid rim for snug fit
            translate([wall_thickness - 0.5, wall_thickness - 0.5, -3])
                difference() {
                    cube([board_length + 1, board_width + 1, 3]);
                    translate([0.5, 0.5, -1])
                        cube([board_length, board_width, 5]);
                }
        }
        
        // Ventilation holes in lid
        if (ventilation_holes) {
            for (x = [15:10:outer_length-15]) {
                for (y = [15:10:outer_width-15]) {
                    translate([x, y, -1])
                        cylinder(d=3, h=lid_thickness + 2);
                }
            }
        }
        
        // FlexiCAD logo cutout
        translate([outer_length/2 - 15, outer_width/2 - 3, lid_thickness - 0.5])
            linear_extrude(1)
                text("FlexiCAD", size=4, halign="center", valign="center");
    }
}

// Mounting post for Arduino board
module mounting_post() {
    difference() {
        cylinder(d=6, h=board_thickness + 3);
        translate([0, 0, board_thickness + 1])
            cylinder(d=2.5, h=3);
    }
}

// Rounded cube module
module rounded_cube(size, radius) {
    hull() {
        translate([radius, radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([size[0]-radius, radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([radius, size[1]-radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([size[0]-radius, size[1]-radius, 0])
            cylinder(r=radius, h=size[2]);
    }
}