// Car Dashboard Fascia
// Custom fascia panel for aftermarket stereo installation
// Generated by FlexiCAD Designer

// Parameters - customize these values
panel_width = 180;          // Overall panel width
panel_height = 100;         // Overall panel height  
panel_depth = 15;           // Panel depth/thickness
stereo_width = 178;         // Stereo unit width
stereo_height = 50;         // Stereo unit height
mounting_holes = 4;         // Number of mounting holes
corner_radius = 5;          // Rounded corner radius
wall_thickness = 2;         // Wall thickness
lip_depth = 8;              // Depth of stereo mounting lip

// Main fascia panel
main_fascia();

module main_fascia() {
    difference() {
        // Main panel body
        rounded_cube([panel_width, panel_height, panel_depth], corner_radius);
        
        // Stereo cutout
        translate([(panel_width - stereo_width)/2, 
                   (panel_height - stereo_height)/2, 
                   wall_thickness])
            cube([stereo_width, stereo_height, panel_depth]);
        
        // Stereo mounting lip recess
        translate([(panel_width - stereo_width - 4)/2, 
                   (panel_height - stereo_height - 4)/2, 
                   panel_depth - lip_depth])
            cube([stereo_width + 4, stereo_height + 4, lip_depth + 1]);
        
        // Mounting holes for dashboard attachment
        mounting_hole_pattern();
        
        // Wire routing channels
        wire_channels();
    }
    
    // Reinforcement ribs
    reinforcement_ribs();
}

// Mounting hole pattern
module mounting_hole_pattern() {
    hole_spacing_x = panel_width - 20;
    hole_spacing_y = panel_height - 20;
    
    for (x = [0, 1]) {
        for (y = [0, 1]) {
            translate([10 + x * hole_spacing_x, 
                      10 + y * hole_spacing_y, 
                      -1])
                cylinder(d=6, h=panel_depth + 2);
            
            // Countersink for screw heads
            translate([10 + x * hole_spacing_x, 
                      10 + y * hole_spacing_y, 
                      panel_depth - 3])
                cylinder(d=12, h=4);
        }
    }
}

// Wire routing channels
module wire_channels() {
    // Bottom channel for power and antenna
    translate([panel_width/2 - 10, -1, wall_thickness + 5])
        cube([20, wall_thickness + 2, 8]);
    
    // Side channels for speaker wires
    translate([-1, panel_height/2 - 5, wall_thickness + 5])
        cube([wall_thickness + 2, 10, 8]);
    
    translate([panel_width - wall_thickness - 1, panel_height/2 - 5, wall_thickness + 5])
        cube([wall_thickness + 2, 10, 8]);
}

// Reinforcement ribs for structural strength
module reinforcement_ribs() {
    rib_thickness = 1.5;
    rib_height = panel_depth - wall_thickness - 2;
    
    // Horizontal ribs
    translate([wall_thickness, panel_height/4 - rib_thickness/2, wall_thickness])
        cube([panel_width - 2*wall_thickness, rib_thickness, rib_height]);
    
    translate([wall_thickness, 3*panel_height/4 - rib_thickness/2, wall_thickness])
        cube([panel_width - 2*wall_thickness, rib_thickness, rib_height]);
    
    // Vertical ribs  
    translate([panel_width/4 - rib_thickness/2, wall_thickness, wall_thickness])
        cube([rib_thickness, panel_height - 2*wall_thickness, rib_height]);
        
    translate([3*panel_width/4 - rib_thickness/2, wall_thickness, wall_thickness])
        cube([rib_thickness, panel_height - 2*wall_thickness, rib_height]);
}

// Rounded cube module
module rounded_cube(size, radius) {
    hull() {
        translate([radius, radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([size[0]-radius, radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([radius, size[1]-radius, 0])
            cylinder(r=radius, h=size[2]);
        translate([size[0]-radius, size[1]-radius, 0])
            cylinder(r=radius, h=size[2]);
    }
}